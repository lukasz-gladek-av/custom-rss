<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Thu, 12 Dec 2024 18:54:43 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Ex-Marathon director Chris Barrett sues Sony and Bungie after 'unfounded' firing]]></title>
            <link>https://www.gamedeveloper.com/business/ex-marathon-director-chris-barrett-sues-sony-and-bungie-after-unfounded-firing</link>
            <guid>https://www.resetera.com/threads/ex-marathon-director-chris-barrett-sues-sony-and-bungie-after-unfounded-firing.1059294/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/ex-marathon-director-chris-barrett-sues-sony-and-bungie-after-unfounded-firing<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Bungie/PlayStation.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Christopher Barrett, director on Bungie's </span><span data-testid="content-text"><span>Marathon </span></span><span data-testid="content-text">before his firing in </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/bungie-s-marathon-gets-director-change-as-studio-frets-over-destiny-2-the-final-shape">March</a></span><span data-testid="content-text">, has </span><span data-testid="content-text"><a target="_blank" href="https://x.com/oryxeleven/status/1867248221967560952">filed a lawsuit</a></span><span data-testid="content-text"> against his former employer and Sony. Per </span><span data-testid="content-text"><a target="_blank" href="https://venturebeat.com/games/ex-dev-leader-chris-barrett-accuses-sony-bungie-of-firing-him-to-avoid-a-45m-payment/">VentureBeat</a></span><span data-testid="content-text">, he argues he was fired so the two companies could avoid granting him a $45 million payout from his employment agreement.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Barrett was let go from the </span><span data-testid="content-text"><span>Destiny 2 </span></span><span data-testid="content-text">developer for </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/report-bungie-fired-ex-marathon-director-after-misconduct-allegations">alleged misconduct</a></span><span data-testid="content-text"> and "behaving inappropriately" toward at least eight women in various departments at the studio. In August, Bloomberg published a report alleging he told female staffers he could help them "advance their careers" and sent them a "barrage" of unwanted text messages.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">At the time, Barrett told the outlet he was "always respectful and supportive" of his coworkers, and gave an apology to anyone he made uncomfortable with his behavior. Prior to being dismissed, he'd been with Bungie since 1999. He was a designer on several games, </span><span data-testid="content-text"><span>Destiny 2 </span></span><span data-testid="content-text">included, and served as a top-level executive at the studio.</span></p><h2 data-testid="content-text" id="Barrett's allegations against Sony and Bungie">Barrett's allegations against Sony and Bungie</h2><p data-testid="content-paragraph"><span data-testid="content-text">In the suit, he alleges Bungie and Sony "deliberately destroyed [his] reputation. [...] Defendants did not care that none of it was true; they had blatant motivations for their brazen scheme."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"Barrett was never asked whether he had ever engaged in inappropriate sexual conduct...or whether he ever retaliated against a co-worker for rebuffing his advances or discriminated against a female colleague on the basis of her sex," it continues. "Barrett was not asked those questions because Barrett did not engage in, and has not been accused of, any such conduct."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In a separate </span><span data-testid="content-text"><a target="_blank" href="https://x.com/oryxeleven/status/1867248221967560952">statement</a></span><span data-testid="content-text">, Barrett said he has "endured rampant speculation, unfounded attacks on my reputation, and innuendo about what happened behind the scenes to cause me to be fired after 25 years of service." He filed his suit with the aim of "holding Bungie and Sony accountable for their conduct and the damage that has been done to my reputation and my career."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"I am confident that the facts are on my side and look forward to clearing my name in the legal process," he concluded.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This is the latest development in a turbulent year for Bungie, which </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/destiny-developer-bungie-cutting-220-jobs-after-exceeding-financial-safety-margins-">laid off 220 employees</a></span><span data-testid="content-text"> after June's </span><span data-testid="content-text"><span>Destiny 2: The Final Shape</span></span><span data-testid="content-text">. Before that, employees alleged to </span><span data-testid="content-text"><a target="_blank" href="https://www.ign.com/articles/bungie-report-battle-soul-work-culture-harassment-crunch">IGN</a></span><span data-testid="content-text"> in 2021 that the studio had been tolerating a culture of sexism and sexual harassment.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Game Developer has reached out to Sony and Bungie for comment, and will update when a response is given.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Deep Dive: Crafting detailed and dynamic water in Planet Coaster 2]]></title>
            <link>https://www.gamedeveloper.com/programming/deep-dive-crafting-detailed-and-dynamic-water-in-planet-coaster-2</link>
            <guid>https://www.resetera.com/threads/deep-dive-crafting-detailed-and-dynamic-water-in-planet-coaster-2.1059192/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/deep-dive-crafting-detailed-and-dynamic-water-in-planet-coaster-2<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Game Developer Deep Dives are an ongoing series with the goal of shedding light on specific design, art, or technical features within a video game in order to show how seemingly simple, fundamental design decisions aren’t really that simple at all.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Earlier installments cover topics such as cover topics such as&nbsp;</span></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-the-movement-of-echo-point-nova">how camera effects, sound FX, and VFX created a smooth and high octane movement system in</a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-the-movement-of-echo-point-nova">&nbsp;Echo Point Nova</a></span><span data-testid="content-text"><span>,&nbsp;the&nbsp;</span></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/production/postmortem-bringing-the-cycle-frontier-to-unreal-editor-for-fortnite">technical process behind bringing&nbsp;</a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/production/postmortem-bringing-the-cycle-frontier-to-unreal-editor-for-fortnite">The Cycle: Frontier</a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/production/postmortem-bringing-the-cycle-frontier-to-unreal-editor-for-fortnite">&nbsp;to Unreal Editor for Fortnite</a></span><span data-testid="content-text"><span>, and&nbsp;</span></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/creating-a-multi-layered-game-world-the-ethos-and-tech-of-tenet-of-the-spark">how the developers at ROAR Games designed three distinct, overlapping game worlds within one cohesive narrative in&nbsp;</a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/creating-a-multi-layered-game-world-the-ethos-and-tech-of-tenet-of-the-spark">Tenet of the Spark</a></span><span data-testid="content-text"><span>.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>In this edition, Frontier Developments render programmer John Wigg explains their methods for creating effects that authentically mimic the behavior of real water.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Hi everyone, I’m John Wigg, a render programmer at the UK-based studio Frontier Developments. We just released </span><span data-testid="content-text"><a target="_blank" href="https://store.steampowered.com/app/2688950/Planet_Coaster_2/">Planet Coaster 2</a></span><span data-testid="content-text"><span>,</span></span><span data-testid="content-text"> the sequel to 2016’s genre-defining creative management simulation game. </span><span data-testid="content-text"><span>Planet Coaster 2</span></span><span data-testid="content-text"> allows players to reach new heights of creativity, management and sharing as they construct the coaster and water parks of their dreams, combining epic water rides and coasters to delight and thrill guests.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Waterparks are a highly requested new addition for </span><span data-testid="content-text"><span>Planet Coaster 2</span></span><span data-testid="content-text">. We wanted to give the same attention to detail and level of immersion to this new area of the game that players have come to expect from the previous </span><span data-testid="content-text"><span>Planet</span></span><span data-testid="content-text"> games. In this deep dive, we will explain how we crafted all the different systems that go hand in hand to achieve this.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Creative freedom is at the core of </span><span data-testid="content-text"><span>Planet Coaster 2. </span></span><span data-testid="content-text">For water parks, this means our players can:</span></p><div data-component="basic-list"><ul data-testid="basic-list-unordered"><li><div><p data-testid="content-paragraph"><span data-testid="content-text">Use free-form building tools to create pools in any shape imaginable</span></p></div></li><li><div><p data-testid="content-paragraph"><span data-testid="content-text">Place wave machines to create wave pools with interesting wave patterns</span></p></div></li><li><div><p data-testid="content-paragraph"><span data-testid="content-text">Explore their parks up close, using the new first-person camera</span></p></div></li></ul></div><p data-testid="content-paragraph"><span data-testid="content-text">It is very important that the systems we create are highly dynamic and can respond to a wide range of situations.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We also had to be aware of how park visitors will interact with the water. A park can have thousands of guests at the same time. Our talented animators authored thousands of unique pool animations for these guests. We wanted to ensure that all these affect water surfaces in a realistic manner.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>A splash fight and swimming guests create ripples. Image and caption via Frontier Developments.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">This high level of detail is one of the pillars of the </span><span data-testid="content-text"><span>Planet</span></span><span data-testid="content-text"> games and something we consider in all areas of development.</span></p><h2 data-testid="content-text" id="Water under the microscope">Water under the microscope</h2><p data-testid="content-paragraph"><span data-testid="content-text">Traditionally, many games render water as a flat plane and create the illusion of an uneven surface by using lighting tricks, e.g., normal or bump maps. These techniques, however, break down when viewed up close.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We wanted the water to feel alive and three-dimensional at any distance. To achieve this, we use a dynamic level-of-detail system. This system works by subdividing the triangles of the water mesh based on the camera distance. This ensures that we always have roughly the same amount of geometry on the screen, achieving a constant rendering cost down to the centimeter scale. This approach is very popular for rendering terrain in open-world games, but it is rare to see it applied to water surfaces in such detail.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>The subdivision of a water surface. Image and caption via Frontier Developments.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">This subdivision allows us to move the geometry of the water surface up and down with the waves and ripples. This adds a lot of plasticity to the water, which is especially noticeable when observing the surface from a shallow angle, e.g., when taking a dip in the first-person camera.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Water ripples in the first-person camera. Image and caption via Frontier Developments.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">We also put a lot of thought into the transition that happens when moving the camera underwater. By rendering the water line on the screen, we achieve something termed a "split-shot" in photography; in a screen-space shader, we transform the pixel position to world coordinates and populate a low-resolution texture with the vertical distance to the water surface. We then threshold this distance texture to render a smooth water line. I recommend giving Improved </span><span data-testid="content-text"><span>Alpha-Tested Magnification for Vector Textures and Special Effects </span></span><span data-testid="content-text">by Chris Green (2007) a read if you’d like to know more about using distance fields for similar effects.</span></p><div data-testid="content-paragraph"><p><span data-testid="content-text"><span>The rendering pipeline for the water line effect. Image and caption via Frontier Developments.</span></span></p></div><p data-testid="content-paragraph"><span data-testid="content-text">In our first full update for the game post-launch, we’ll also be adding a fun water droplet effect to the camera as it enters and exits the water.</span></p><h2 data-testid="content-text" id="Bringing water to life">Bringing water to life</h2><p data-testid="content-paragraph"><span data-testid="content-text">Now that we can render highly detailed water surfaces, we will look at how we animate them.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Each guest type (kids, teens, and adults) has hundreds of different animations for different pool interactions. All these animations disturb the water in different ways, e.g., a swimming guest will create a wake and pull swirls behind them, and someone cannonballing into a pool may create a big splash. Park guests can also participate in splash fights. Our solution for animating the water surface must dynamically react to these interactions in a plausible manner.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Humans have a very intuitive understanding of the motion of water, so a fun and lively water animation should be as true to life as possible. To achieve this, we utilize a state-of-the-art fluid simulation. This allows the water to realistically flow around guests, creating swirls and ripples in the process.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">There exist plenty of different models for fluid simulations for different use-cases. (As you’re about to see, we utilize two different fluid simulations for this very reason.) Some of these models may focus more on certain characteristics of fluids, some are fully three dimensional, while others operate in two dimensions.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For pools, we are interested in three characteristics of the water: Its vertical displacement (up-and-down motion), its flow (e.g., swirls and vortices), and foam. Our fluid simulation is two-dimensional since we are only interested in surface effects but not the water’s deeper layers.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Displacement, flow, and foam in action. Image and caption via Frontier Developments.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">On a high level, our fluid simulation works like this: for each frame, we populate a grid of data, stored as a texture on the GPU, with the current displacement and flow vectors. If we detect that a guest, or any other physics collider, intersects the water surface, we override the corresponding grid positions with a displacement amount and the velocity of the object. The resulting displacement and velocity values are our so-called initial conditions. Using our simulation code, we evolve these initial conditions and render the output. We then use this output as the initial conditions for the next frame, and so on.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>The data flow of our fluid simulation. Image and caption via Frontier Developments.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">For our simulation code, we needed to choose a mathematical model that matches the requirements of the game. For a simple simulation, one may just use the standard wave equation. Instead, we chose the so-called shallow water equations, which also model displacement and flow. This allows us to animate even more effects, such as swirls.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Turning these equations into a computer program is an art in itself, and a plethora of materials on the topic exist, ranging from beginner-friendly YouTube tutorials to highly technical scientific papers. The choice again will depend on the requirements of your game. My advice is to err on the side of simplicity and not get lost in the mathematical intricacies early on.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For the technically inclined, I’ll throw in some jargon (feel free to skip this part): we use a semi-Langrangian formulation of the shallow water equations, which we integrate using the Crank-Nicolson method. Our numerical solver is the Preconditioned Conjugate Gradient (PCG) method. Some works we referenced are “</span><span data-testid="content-text"><span>A numerically efficient and stable algorithm for animating water waves”</span></span><span data-testid="content-text"> by Anita Layton and Michiel van de Panne (2002), </span><span data-testid="content-text"><span>“A Parallel Preconditioned Conjugate Gradient Solver for the Poisson Problem on a Multi-GPU Platform”</span></span><span data-testid="content-text"> by Marco Ament et al. (2010), and the talk </span><span data-testid="content-text"><span>“Real-Time Fluid Simulation in Shadow of the Tomb Raider” </span></span><span data-testid="content-text">by Peter Sikachev (2018). Chapter 38 of “</span><span data-testid="content-text"><span>GPU Gems”</span></span><span data-testid="content-text"> (2004) also gives a good introduction to the topic.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">It took us a lot of research as well as some trial and error to arrive at this solution, and it gives us very stable and accurate results. This is important as the player can control the game speed up to five times as fast as real-time.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We do all this work on the GPU using compute shaders. GPUs are well suited for this task, as they are extremely efficient in updating each grid point in parallel.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We also simulate a foam layer on top of the surface, using the outputs from the fluid simulation to dynamically add foam and transport it with the flow of the water.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">All this gives us a fully dynamic water simulation that naturally reacts to whatever we or the player may throw at it.</span></p><h2 data-testid="content-text" id="Making waves">Making waves</h2><p data-testid="content-paragraph"><span data-testid="content-text">In addition to the ripples created by park guests, we also allow our players to build wave pools by placing wave machines on the sides of pools. Our players can create interesting and fun wave patterns in this way, and we’ve already seen many creative uses of this tool.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>A wave machine at the end of the pool creates waves in the water. Image and caption via Frontier Developments.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Since the waves from wave machines are much bigger than the ripples created by guest interactions, we utilized an additional, different fluid simulation.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The model we used here is much simpler than the one used for the guest interactions. We based it on the so-called "hydrostatic pipe model" introduced in “</span><span data-testid="content-text"><span>Dynamic Simulation of Splashing Fluids”</span></span><span data-testid="content-text"> by James O’Brien and Jessica Hodgins (1995): we subdivide each pool into a grid of one-by-one meter cells. Each cell is then connected to its four neighbors by imaginary "pipes," through which water flows freely, based on the height difference between each pair of neighbors. Creating waves then becomes trivial: we periodically remove some water from the pool and then add it back, creating troughs and peaks in the process. This is close to how some wave machines work in the real world!</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>The hydrostatic pipe model: Each cell has four flow pipes to its neighbors. Image and caption via Frontier Developments.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">As this simulation affects gameplay (guests react to waves), we decided to implement it on the CPU. Each pool runs its own simulation, so we can easily distribute the work across different threads when there are multiple pools in a park. Things become a little trickier when we have a very big pool, however: the only limit to the size of a pool is the size of the playable area. We also need to update the simulation every frame in real-time.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Distributing a single simulation onto multiple threads would require complex synchronization code. Instead, we heavily utilize SIMD instruction sets. SIMD is short for </span><span data-testid="content-text"><span>single instruction, multiple data</span></span><span data-testid="content-text"> and allows us to perform the same operation (e.g., multiplication) on multiple values in just one CPU instruction. This means we can update multiple grid points in parallel in just one operation! A lot of this code has been hand-tuned and continuously performance-tested to make sure the game always runs smoothly, even in large parks with huge pools.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>The SIMD instructions can compute eight cells in one go! Image and caption via Frontier Developments.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">In fact, the wave simulation ended up being so efficient that we decided to use it for the shore waves on our island and coastline levels as well.</span></p><h2 data-testid="content-text" id="How everything flows together">How everything flows together</h2><p data-testid="content-paragraph"><span data-testid="content-text">In this deep dive, we spoke about several systems, each modeling a different aspect of water: we implemented highly-detailed water surface rendering, allowing us to display water surfaces in three dimensions, even when viewed up close. A state-of-the-art fluid simulation dynamically and naturally animates ripples, flow, and foam. And finally, a simple but efficient wave simulation brings wave pools, and even shorelines, to life.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">All these systems have their own focus, and their strengths go hand in hand to create highly detailed, immersive, and creative water parks.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Thank you so much for reading and we hope you enjoyed this little dip in the water rendering and physics in </span><span data-testid="content-text"><span>Planet Coaster 2</span></span><span data-testid="content-text">! Hopefully, you have a clearer picture of how our different water systems work and interact, and maybe some of the techniques we outlined will be useful in your own endeavors or can serve as an inspiration.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We’d also like you to take away from this article that games are complicated machines that consist of many moving parts. Some of these parts will be more complex than others, but they all work together to create the final experience. Do not get discouraged early on. Instead, identify the individual components of your game and iterate on them. Try simple approaches first; in many cases, such an approach will already yield amazing results, leaving you more time to iterate on the more complex areas.</span></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>