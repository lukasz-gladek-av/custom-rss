<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Wed, 07 May 2025 16:57:32 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Deep Dive: Lushful Photography Sim's emotive, mathematical long-exposure photography system]]></title>
            <link>https://www.gamedeveloper.com/programming/deep-dive-making-lushfoil-s-long-exposure-photography-system</link>
            <guid>https://www.resetera.com/threads/deep-dive-lushful-photography-sims-emotive-mathematical-long-exposure-photography-system.1183299/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/deep-dive-making-lushfoil-s-long-exposure-photography-system<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Matt Newell/Annapurna Interactive.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Game Developer Deep Dives are an ongoing series with the goal of shedding light on specific design, art, or technical features within a video game in order to show how seemingly simple, fundamental design decisions aren’t really that simple at all.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Earlier installments cover topics such as cover topics such as </span></span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/audio/deep-dive-sound-design-for-the-living-world-in-avatar-frontiers-of-pandora">the sound design of Avatar: Frontiers of Pandora,</a></span><span data-testid="content-text"><span>&nbsp;</span></span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/design/deep-dive-the-movement-of-echo-point-nova">how camera effects, sound FX, and VFX created a smooth and high octane movement system in&nbsp;Echo Point Nova</a></span><span data-testid="content-text"><span>,&nbsp;and the&nbsp;</span></span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/production/postmortem-bringing-the-cycle-frontier-to-unreal-editor-for-fortnite">technical process behind bringing&nbsp;The Cycle: Frontier&nbsp;to Unreal Editor for Fortnite</a></span><span data-testid="content-text"><span>.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Hey everyone, my name is Matt, I'm the solo dev behind Lushfoil Photography Sim, the newly released tranquil photography game. For this project I wanted to create a realistically simulated DSLR camera, for the satisfaction of photographers and to hopefully let newcomers learn more about camera settings.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Most of the camera's standard effects like depth of field, focal length, exposure and noise are all very easily simulated in Unreal Engine. The one effect that was missing however, was the ability to recreate long exposure, a standard feature of high grade cameras that allows you to leave the shutter open and capture an entire range of motion in one image. I hadn't seen this being done in a game engine before, so I wanted to give it my best shot.</span></p><p data-component="related-article"><span data-testid="related-article-title">Related:</span><a href="https://www.gamedeveloper.com/programming/how-avowed-s-qa-team-stomped-out-bugs-by-working-inside-the-design-tools" target="_self" data-discover="true">How Avowed's QA team stomped out bugs by working inside the design tools</a></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Final in-game effect:</span></span></p><p>Image via Matt Newell/Annapurna Interactive.</p><p>Image via Matt Newell/Annapurna Interactive.</p><p data-testid="content-paragraph"><span data-testid="content-text">The approach I made to this was purely based on math. Real cameras don't work in "frames" or "ticks," so the in-engine solution for this would be to sequentially take images over time and compile them on top of one another. Combining all these images would end up being way too bright of course, so I created various methods of adjusting the exposure and appearance until I landed on the right outcome. I’ll try and describe the approach I took in each attempt, what went wrong, and how I found the correct solution.</span></p><h2 data-testid="content-text" id="First attempt:">First attempt:</h2><p data-testid="content-paragraph"><span data-testid="content-text">If I were to take images over a long exposure period of one second, I would have 30 images. My first idea was to add these 30 images all together at once, and divide the final result by 30. This was what it looked like:</span></p><p>Image via Matt Newell/Annapurna Interactive.</p><p>Image via Matt Newell/Annapurna Interactive.</p><p data-testid="content-paragraph"><span data-testid="content-text">We had a correct blur effect going on, but there were some obvious problems. Initially combining all 30 images together resulted in some really high values that must’ve been clamped, before the division by 30 happened.</span></p><h2 data-testid="content-text" id="Second Attempt:">Second Attempt:</h2><p data-testid="content-paragraph"><span data-testid="content-text">Next, I tried halving the brightness every time subsequent frames were added. I figured if you add 1+1, then divide by 2, you’ll get the correct exposure of 1.</span></p><p>Image via Matt Newell/Annapurna Interactive.</p><p>Image via Matt Newell/Annapurna Interactive.</p><p data-testid="content-paragraph"><span data-testid="content-text">The problem with this was, the images that were taken last would have a stronger weight than the images taken first. This resulted in a prominent last image, with the whites and darks out of proportion.</span></p><p data-component="related-article"><span data-testid="related-article-title">Related:</span><a href="https://www.gamedeveloper.com/programming/unity-s-ceo-cto-promise-stability-after-runtime-fee-debacle" target="_self" data-discover="true">Unity's CEO, CTO promise 'stability' after runtime fee debacle</a></p><h2 data-testid="content-text" id="Third Attempt (winning combination):">Third Attempt (winning combination):</h2><p data-testid="content-paragraph"><span data-testid="content-text">The solution was to use the same method as the previous attempt, but instead of dividing by 2, I would divide by the total number of images in the sequence. The second frame would be divided by 2, the 12th frame would be divided by 12, giving each frame the proper weight.</span></p><p>Image via Matt Newell/Annapurna Interactive.</p><p>Image via Matt Newell/Annapurna Interactive.</p><p data-testid="content-paragraph"><span data-testid="content-text">I then increased the number of captures to 30 frames per second to get an accurate smear without being too taxing on performance.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">After getting these output shots in-engine, I was thrilled. There's something far more lifelike about an imperfect image, filled with blur and motion, that made these shots feel so real. I added some extra layers of implementation so that the player could control how long the shutter would be left open, and that it would be fully compatible with 'M' manual mode, and correctly influence the other camera settings.</span><br><span data-testid="content-text">I wasn’t sure I’d be able to achieve this effect at all, but I’m really glad I spent the time doing experimentation, and was able to get lucky. I hope all enthusiast photographers will appreciate being able to do this effect in-game.</span></p><p data-component="related-article"><span data-testid="related-article-title">Related:</span><a href="https://www.gamedeveloper.com/programming/7-how-assassin-s-creed-shadows-makes-environments-look-great-up-close-and-at-a-distance" target="_self" data-discover="true">How Assassin's Creed Shadows makes environments look great up close and at a distance</a></p><p>Image via Matt Newell/Annapurna Interactive.</p><p>Image via Matt Newell/Annapurna Interactive.</p><p>Image via Matt Newell/Annapurna Interactive.</p><p data-testid="content-paragraph"><span data-testid="content-text">Please consider checking out </span><span data-testid="content-text"><span>Lushfoil Photography Sim</span></span><span data-testid="content-text"> on Steam, Epic, Playstation and Xbox! You can find my social media accounts </span><span data-testid="content-text"><a target="_blank" href="https://linktr.ee/lushfoil">here</a></span><span data-testid="content-text">.</span></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>