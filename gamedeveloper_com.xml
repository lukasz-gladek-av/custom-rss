<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Thu, 13 Mar 2025 16:24:17 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Encouraging player creativity in Caves of Qud]]></title>
            <link>https://www.gamedeveloper.com/design/encouraging-player-creativity-in-caves-of-qud</link>
            <guid>https://www.resetera.com/threads/encouraging-player-creativity-in-caves-of-qud.1133559/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/encouraging-player-creativity-in-caves-of-qud<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>All images via Freehold Games/Kitfox Games</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>The IGF (Independent Games Festival) aims to encourage innovation in game development and to recognize independent game developers advancing the medium. This year, Game Developer sat down with the finalists&nbsp; for the IGF’s Nuovo and Grand Prize nominees ahead of GDC to explore the themes, design decisions, and tools behind each entry. Game Developer and GDC are sibling organizations under Informa.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text">, one of the nominees for the Seumas McNally Grand Prize at this year’s IGF, offers players the ability to explore, meet characters, and do just about anything in its vast, deep simulation of its sci-fi world. Filled with thousands of years of lore and culture that have been written and built alongside systems designed to inspire player creativity, this years-in-the-making game offers a great deal to discover depending on how you choose to explore it.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Game Developer had a chat with Jason Grinblat and Brian Bucklew, the game’s co-creators, to talk about the challenges involved in creating so many opportunities for player creativity in the game, how they managed to create the game’s written descriptions when the player is capable of acting in so many different ways, and the challenges that come from making a game for almost twenty years.</span></p><p data-component="related-article"><span data-testid="related-article-title">Related:</span><a href="https://www.gamedeveloper.com/design/inside-indika-s-powerful-bleak-exploration-of-religion" target="_self" data-discover="true">Inside Indika's powerful, bleak exploration of religion</a></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Who are you, and what was your role in developing </span></span><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text"><span>?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Jason Grinblat, co-creator:</span></span><span data-testid="content-text"> I’m Jason Grinblat and I also have Brian Bucklew here. We’re the co-creators of </span><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text">. Originally it was just the two of us working on the game, but since our Steam EA launch in 2015 the team has grown considerably.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Broadly speaking, I head up the creative/design side and Brian heads the technical side, but it’s a much more mixed bag than that, in reality. Each of us does a lot.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>What's your background in making games?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Grinblat:</span></span><span data-testid="content-text"> We came up as hobbyists and we still sort of are. We grew up together playing and making games. </span><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text"> is actually the first one we put out to the public (as an early alpha back in 2010). We took a break from </span><span data-testid="content-text"><span>Qud</span></span><span data-testid="content-text"> development to make </span><span data-testid="content-text"><span>Sproggiwood</span></span><span data-testid="content-text"> (release date 2014), and we’ve done some AAA consulting work. But most of our serious time in games, actually, has been spent making </span><span data-testid="content-text"><span>Qud</span></span><span data-testid="content-text">.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>How did you come up with the concept for </span></span><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text"><span>?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Grinblat:</span></span><span data-testid="content-text"> It was the confluence of several things. Around 2007, we were making a tabletop roleplaying game with an expansive, far-future science fantasy setting. We were also toying around with the design for a turn-limited exploration-based webgame. We were ALSO developing a roguelike engine. At some point these projects merged and became the genesis of Caves of </span><span data-testid="content-text"><span>Qud</span></span><span data-testid="content-text">.</span></p><p data-component="related-article"><span data-testid="related-article-title">Related:</span><a href="https://www.gamedeveloper.com/design/making-a-life-in-the-funky-plant-filled-world-of-starship-home" target="_self" data-discover="true">Making a life in the funky, plant-filled world of Starship Home</a></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>What development tools were used to build your game?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Brian Bucklew, co-creator:</span></span><span data-testid="content-text"> </span><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text"> was originally a raw C# .NET 2.0 application. For the Steam release we ported that codebase into Unity. We started on Unity version 4, and 1.0 was released last December on Unity 2022.3. The team devs use either Visual Studio or Visual Studio Code and also Linear, Confluence, Git, and Bitbucket for collaboration and planning.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text"><span> gives players the means to do just about anything they want in the game's world, capturing the chaotic freedom of a tabletop roleplaying game. What thoughts and challenges go into accounting for (and allowing) so many different possibilities of player interaction with every object, surface, and character?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Grinblat:</span></span><span data-testid="content-text"> It’s a big technical and design challenge. For both those domains, we tend to think in terms of modularity—how can we break components down so they can be freely combined in expressive ways. And then we try to make sure each module has a personality. For instance, the concept of door carries a lot of weight with it, and so you get to import and play with that whole network of cultural associations when you, say, cast that door as a sentient creature and allow it to be talked to, traded with, played as.</span></p><p data-component="related-article"><span data-testid="related-article-title">Related:</span><a href="https://www.gamedeveloper.com/design/ghostrunner-2-deep-dive" target="_self" data-discover="true">Feedback and experimentation: the foundations of Ghostrunner 2</a></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>The game is filled with excellent writing to cover its many varied moments and events. How do you create well-crafted writing when there are so many different possible actions and activities? When so many different things can all feed into a single moment? How do you account for the varied possibilities while still preserving the great writing?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Grinblat:</span></span><span data-testid="content-text"> Again, I’d say our process is twofold. On the one hand, we do a lot of "traditional" writing a la RPGs or interaction fiction like handwritten NPCs, dialogue, quests, object descriptions, etc. This forms a kind of trellis for the more procedural stuff to grow on. Procedural content always needs something stable to be read against or else it doesn’t cohere into something meaningful.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In writing for the procedural modules themselves, we try to leave enough degrees of freedom so that the gestalts feel good when the modules are combined. For example, in writing creature descriptions, I shy away from depicting what they're wearing or where they’re located, since those things are subject to change in the free-for-all of play. I want something that is resonant but movable between contexts.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Finally, we’ve developed a rich, offbeat science fantasy setting that acts as a soft landing for all the wild combinations that show up. For a game world that wants meaningful replayability, a good setting is like a wet sponge. It gives with another squeeze; there’s something in its network of symbols that benefits or enriches from thinking through at another angle. This is the type of setting </span><span data-testid="content-text"><span>Qud</span></span><span data-testid="content-text"> grew into.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>The game features many wild things players can do or experience, and you walked us through how you come up with these ideas in a previous </span></span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/design/tapping-into-the-potential-of-procedural-generation-in-caves-of-qud">interview with Game Developer</a></span><span data-testid="content-text"><span>. Can you tell us of a personal favorite mechanic/ability/action and walk us through how you designed and implemented it into the game?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Grinblat:</span></span><span data-testid="content-text"> Some spoilers here. By late game, for inscrutable plot reasons, you’re tasked with creating a golem. To do it you have to bring together an assemblage of bizarrely thematized components: the body ("as a model"), the catalyst ("to charge the sanguine fluid"), the atzmus ("as deistic direction"), etc. This is a craft project that pulls together several systems and facets of the game world you’ve been inhabiting for hours and hours at this point.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Just like character creation, it was important for this to feel expressive—to provide a broad palette that didn’t feel prescriptive that acts like a raw physics for you to build on top of. Over our years and years of development, we’ve amassed a trove of rich, authored data on our game objects—creatures, furniture, items, fluids, body parts, journal entries. There are several thousand game-things each with a distinct personality. We realized we could attach thematically-aligned effects to each of those and feed them into a giant crafting metasystem that felt commensurate with the scale of the quest and the real-world symbology it’s drawing from. The result: players ferreting out all sorts of wild designs for making the weirdest and niche-est golems possible. One player went on a personal quest to discover a way to give his companion (a tree) wings so they could ferry them to the mound of scrap and clay where crafting happens and create a tree golem. The game allowed it.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text"><span> was in development for seventeen years. What challenges came from working with decades-old code and systems you had previously created? How do you ensure the game's old code plays nice with stuff you've made more recently, and how do you ensure it all works well together on modern systems? Can you tell us some of the work you've done to make everything run together?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Bucklew:</span></span><span data-testid="content-text"> </span><span data-testid="content-text"><span>Caves of Qud</span></span><span data-testid="content-text"> is a large legacy system. One of the things we've done at least semi-successfully is pay down technical debt at a modest but consistent pace. Our weekly public patch cadence leading up to 1.0 was focused primarily on paying down debt to make sure we weren't buried in it.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Unity helps us keep our game running on the latest systems by saving us the bulk of core engine platform support work. This is a huge cost savings in terms of ongoing technical maintenance. The technical gap bridged across Windows, Linux, and MacOS from Unity 4 in 2014 and Unity 2023 is huge and Unity paid the bulk of that technical cost.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Even with that, though, some of the biggest challenges were in converting a game that was originally a console-only roguelike to a modern game that could be run on the Steam Deck. This meant adding a whole new UI, a whole new input system, tiles, subsystems for sound and music, and more. Each of these was an enormous development effort involving the creation of new systems and the refactoring of old systems to meet the new requirements, and there was no real trick to it other than just putting in the elbow grease to get each one done. Knowing it would be a long project, at each step we made our best effort to ensure each one was a solid foundation that we could build the next increment on.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>How has the game changed (or not changed at all) over the many years you've been working on it? What prompted some of the changes (and what were those changes), or what made you stay the course this whole time?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Grinblat:</span></span><span data-testid="content-text"> The broad vision of the game has remained remarkably consistent over the 17 years. This last Fall we were finally implementing some of the plans we hatched back in 2007. It felt wild. Of course, the game has changed as well; we’ve grown as designers, as thinkers, as people. What interests us now, in our 40s, looks a bit different than what interested us in our 20s. But, as several of our players have pointed out, the resulting layer cake of development history has some convenient resonances with the history-as-a-layer-cake themes of the game itself.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Having spent the better part of a lifetime working on this game, what feelings came out of reaching the 1.0 release? When you work on something for this long, how did you even decide that you had done enough that it was time for a 1.0 release? How did you decide that this massive game was finally "complete," and how does it feel now that you've reached that milestone?</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Grinblat:</span></span><span data-testid="content-text"> Sublime, surreal, hazy from exhaustion. It’s honestly almost too much to process, and we still need more time to land on what it feels like to be "done."&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">As for how we chose the 1.0 target, for a long time our roadmap was pointing to three big milestones, where we'd 1) have rewritten the UI to the modern, friendlier RPG UI you see in the game now, 2) have some sort of tutorial or new player funnel, and 3) have finished the main quest and have the game be beatable. We got there; that’s 1.0. Now beyond that…. ????</span></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>