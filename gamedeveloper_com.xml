<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Tue, 12 Nov 2024 17:22:51 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Deep Dive: Developing a clear and consistent visual language in the UI of Beastieball]]></title>
            <link>https://www.gamedeveloper.com/art/deep-dive-developing-a-clear-and-consistent-visual-language-in-the-ui-of-beastieball</link>
            <guid>https://www.resetera.com/threads/deep-dive-developing-a-clear-and-consistent-visual-language-in-the-ui-of-beastieball.1033773/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/art/deep-dive-developing-a-clear-and-consistent-visual-language-in-the-ui-of-beastieball<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Images via Klei Publishing.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Game Developer Deep Dives are an ongoing series with the goal of shedding light on specific design, art, or technical features within a video game in order to show how seemingly simple, fundamental design decisions aren’t really that simple at all.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Earlier installments cover topics such as </span></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-the-movement-of-echo-point-nova">how camera effects, sound FX, and VFX created a smooth and high octane movement system in </a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-the-movement-of-echo-point-nova">Echo Point Nova</a></span><span data-testid="content-text">, </span><span data-testid="content-text"><span>the </span></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/production/postmortem-bringing-the-cycle-frontier-to-unreal-editor-for-fortnite">technical process behind bringing</a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/production/postmortem-bringing-the-cycle-frontier-to-unreal-editor-for-fortnite"> The Cycle: Frontier </a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/production/postmortem-bringing-the-cycle-frontier-to-unreal-editor-for-fortnite">to Unreal Editor for Fortnite</a></span><span data-testid="content-text">, and </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/creating-a-multi-layered-game-world-the-ethos-and-tech-of-tenet-of-the-spark">how the developers at ROAR Games designed three distinct, overlapping game worlds within one cohesive narrative in</a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/creating-a-multi-layered-game-world-the-ethos-and-tech-of-tenet-of-the-spark"> Tenet of the Spark</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>In this edition, </span></span><span data-testid="content-text">Wandersong</span><span data-testid="content-text"><span> developer Greg Lobanov explains basic techniques and design principles that shaped the clear, concise visual language in the UI of his upcoming game, </span></span><span data-testid="content-text">Beastieball</span><span data-testid="content-text"><span>.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">In my time as a game director, I’ve created a few indie darlings that are known for their bold styles and creative UI, including </span><span data-testid="content-text"><span>Chicory: A Colorful Tale, Wandersong,</span></span><span data-testid="content-text"> and soon-to-be </span><span data-testid="content-text"><span>Beastieball. </span></span><span data-testid="content-text">I work in very small teams and do all of the UI for my games myself. It’s something I’ve grown to love very much, and I’ve developed a few basic principles for how I approach things that I’d like to share. These techniques straddle the border between visual design and tech because that’s my skillset, and they’re mostly designed to create something acceptable as fast as possible. If you specialize in UI/UX, you may even be offended by my low-brow approach! But I hope you can forgive me and we can still be friends.</span></p><h2 data-testid="content-text" id="One neat trick">One neat trick</h2><p data-testid="content-paragraph"><span data-testid="content-text">When I’m looking into a new project, art direction is one of the first things I establish, and the art direction naturally guides the appearance of the UI as well. Once I have a general idea of how the game will look, I usually program a few helper functions/shaders to make certain effects or shapes as easy as possible to drop in anywhere. Then, for years after that, I use those little helper functions everywhere… all of the time… for everything.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">That’s the entire trick, but we can look at it in practice with </span><span data-testid="content-text"><span>Beastieball.</span></span></p><h2 data-testid="content-text" id="Parallelograms and patterns in Beastieball">Parallelograms and patterns in Beastieball</h2><p>Images via Greg Lobanov/Klei Publishing.</p><p data-testid="content-paragraph"><span data-testid="content-text">In </span><span data-testid="content-text"><span>Beastieball</span></span><span data-testid="content-text"> UI, the key theme is all parallelograms because they are the sportiest shape. (I think ESPN did this). The game is an RPG with a lot of UI, numbers and lists, so this basic style works great because it’s just </span><span data-testid="content-text"><span>barely</span></span><span data-testid="content-text"> a twist on the most boring, simple layout style you can do, which is just putting text in rectangles. The slight skew, and arranging things on an angle rather than straight up and down, makes the game feel infinitely more stylish. In the biz, this is what we call "art direction."</span></p><p>The other main repeating visual motif are the looping shape patterns (dots, lines, diamonds) which scroll ambiently. Images and captions via Greg Lobanov/Klei Publishing.</p><p data-testid="content-paragraph"><span data-testid="content-text">All of these were supported by very simple one-line functions, which I used everywhere, brainlessly.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>draw_pgram(x1,y1,x2,y2) </span></span><span data-testid="content-text">was the first of these I wrote. It just draws a parallelogram within the specified boundaries. The angle of the tilt is determined by a universal macro/global number which I basically never changed.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>shader_set_scrollpattern(graphicAsset, color) </span></span><span data-testid="content-text">was another one. I created a shader which would take an input texture (like a scrolling dot pattern) and overlay it on whatever was rendered after that, with the texture position slowly scrolling over time. So for example, if I set this shader to use a dot pattern and a yellow color, then rendered a pink parallelogram, the result would be a pink parallelogram with scrolling yellow dots on it.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">That’s pretty much it. The entire UI style of </span><span data-testid="content-text"><span>Beastieball</span></span><span data-testid="content-text"> was founded on basic one-line functions like this. Some of the cleverness comes in the consistency of application; by using these visual motifs for EVERYTHING, I sometimes ran into problems conveying the info I needed. But I persevered and made everything work without ever breaking the boundaries I’d set. As a developer, this can be seen as a sort of laziness, but to players I think the effect is also one of the game having a very clear and consistent visual style.</span></p><h2 data-testid="content-text" id="Lazy tweens">Lazy tweens</h2><p data-testid="content-paragraph"><span data-testid="content-text">I need to credit my college professor </span><span data-testid="content-text"><a target="_blank" href="http://jervo.org/">Jervis Thompson</a></span><span data-testid="content-text"> for this one. I use it so many times per day, I sometimes forget that it might(?) not be common knowledge to everyone. It’s basically a braindead method for having stuff move around the screen in a pleasing way, using as few codelines and states as possible. This is it:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Position += (TargetPosition - Position) * Speed;</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Where </span><span data-testid="content-text"><span>Position</span></span><span data-testid="content-text"> is the current position of a UI element (this could also be its angle, scale, opacity, or any variable, really).</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>TargetPosition</span></span><span data-testid="content-text"> is the intended final resting place of that element.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Speed</span></span><span data-testid="content-text"> is a value above 0 and below 1. My favorite value for Speed is 0.3 but maybe you’ll find your own which you like even more!</span></p><p>Images via Greg Lobanov/Klei Publishing.</p><p data-testid="content-paragraph"><span data-testid="content-text">This simple sort of code is what drives a ton of tiny UI animations in the game, like the scale and position of elements animating when you open and close a menu. It’s really easy to add this anywhere, and it always makes things look better, so it’s a good habit to get into if you’re a complete hack (affectionate) like myself and Jervis.</span></p><h2 data-testid="content-text" id="Indexed palettes">Indexed palettes</h2><p data-testid="content-paragraph"><span data-testid="content-text">I use this technique everywhere I possibly can, not just in UI. But, basically: I define a small list of colors, and then every UI element gets its color by referencing one of those pre-defined colors by index (i.e. color 1, color 2, color 3…). I do this rather than defining the colors for each asset, or using imported image assets with colors already on them, because it makes it very easy to adjust the colors as I go, and also ensures that every visual element is harmonious.</span></p><p>I can also swap out the list of colors easily to create visual theme options for players that work across all menus. Images and captions via Greg Lobanov/Klei Publishing.</p><h2 data-testid="content-text" id="UI should support the core gameplay">UI should support the core gameplay</h2><p data-testid="content-paragraph"><span data-testid="content-text">This is the part where I get more annoying and philosophical about UI design like I’m some kind of sage.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I think it’s really important to recognize that UI is the player’s window into the soul of your game. The things that you choose to show them, and NOT show them, entirely define their understanding of your world. So be careful about overusing or underusing UI… think about where you want the player’s attention to be and where you want them to look to find certain information. A classic example of overwrought UI would be when maps in games are easier to navigate than the game world itself, leading players to navigate purely by UI and ignore all your amazing environments, etc.</span></p><p>Images via Greg Lobanov/Klei Publishing.</p><p data-testid="content-paragraph"><span data-testid="content-text">I’ll share one specific example where I avoided UI overuse (in my opinion). In </span><span data-testid="content-text"><span>Wandersong</span></span><span data-testid="content-text">, there’s a section with a bunch of different islands you can visit, each containing parts of a larger puzzle/quest so the player has to navigate around between them. Generally, the game is a side-scroller, and my initial plan for navigating the islands was to add some sort of quick menu that would let the player fast travel between them.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">But when it came time to implement, the menu idea seemed incredibly boring for an over-the-top adventure like </span><span data-testid="content-text"><span>Wandersong</span></span><span data-testid="content-text">. I wound up adding a special screen that was unlike anything else in the game, wherein you used singing to steer a pirate boat around instead. It does feature a map of the islands, which you can quickly bring up with a button press </span><span data-testid="content-text"><span>(that’s a lazy tween…), </span></span><span data-testid="content-text">but you can’t move while looking at the map, so it invites you to plan a route and then sing your way there. </span><span data-testid="content-text"><span>(Also, we hid a secret bonus island under the character’s thumb).</span></span><span data-testid="content-text"> Mechanically speaking, it’s very shallow, and it certainly added a lot of extra travel time. But it also remains one of the most popular segments of the game and one players frequently comment on, I think in part because of the way it breaks with expectations.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The lesson here isn’t that all fast travel menus should be replaced with a musical pirate boat, but more that it’s worth taking the extra time to consider your approach to game elements and to be intentional about how and when you use different interfaces. A fast travel menu is convenient, but it also invites players to look at your world in a more utilitarian way, and takes away the simple pleasure of moving yourself from point A to point B. It’s a great fit for lots of games, but maybe not all of them.</span></p><h2 data-testid="content-text" id="Core gameplay supports the UI">Core gameplay supports the UI</h2><p data-testid="content-paragraph"><span data-testid="content-text">OK, last point to make from way up here on my high horse.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">You know how I said UI is the player’s window to the game’s soul? Well, it’s also yours as the developer. It’s an organized visual representation of the chaotic, dark inner world of the thing you’re making. And when your game has problems, sometimes those will first surface in the UI. Because of this, it can be helpful to actually design your game’s underlying systems in such a way that they support the UI (!).</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This was an idea that was crystallized really well in </span><span data-testid="content-text"><a target="_blank" href="https://www.rockpapershotgun.com/into-the-breach-interface-design">Into the Breach</a></span><span data-testid="content-text"><a target="_blank" href="https://www.rockpapershotgun.com/into-the-breach-interface-design">’s design post-mortems</a></span><span data-testid="content-text">, which I think all designers could stand to learn from.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I’ll say this has come up all the time in a million tiny ways while designing </span><span data-testid="content-text"><span>Beastieball</span></span><span data-testid="content-text">, and I’m sure any designer who’s worked on a tactics or RPG-style game can relate. To improve the clarity of UI, we put all sorts of restrictions on the design, such as how many status effects a move can apply. Sometimes, we’ll have a great idea for a new play or a new Beastie game mechanic, but it gets tossed out in the planning stage because we realize there’s simply no easy way to explain it to players. And, to be clear, I don’t think that compromises the quality of the game design… the fact that our ideas are too complex to communicate via UI means they are inherently confusing and unnecessary! The UI is just always our first clue to that realization.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In many ways, the design of the UI </span><span data-testid="content-text"><span>is</span></span><span data-testid="content-text"> the game design, too. Even on larger teams that segment those into separate roles, I’d recommend that teams foster good communication and let UI designers have a voice in broader design decisions.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Thanks for reading, I hope you go make some awesome video games!</span></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>