<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Mon, 17 Mar 2025 08:10:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Bethesda relaunches paid mod store for Skyrim: Special Edition]]></title>
            <link>https://www.gamedeveloper.com/business/bethesda-relaunches-paid-mod-store-for-skyrim-special-edition</link>
            <guid>https://www.resetera.com/threads/bethesda-relaunches-paid-mod-store-for-skyrim-special-edition.1136358/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/bethesda-relaunches-paid-mod-store-for-skyrim-special-edition<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">A new update for the remastered edition of&nbsp;</span><span data-testid="content-text"><span>The Elder Scrolls V:&nbsp;Skyrim </span></span><span data-testid="content-text">has come with a new storefront for paid mods for the game. Known as&nbsp;</span><span data-testid="content-text"><a target="_blank" href="https://bethesda.net/en/article/52xMsb1fD2nTiNBkiWCbxq/build-share-and-find-creations-skyrim-special-edition">Bethesda Game Studios Creations</a></span><span data-testid="content-text">, the platform has been dubbed&nbsp;"an enhanced platform for building and sharing community-made content."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Back in 2015,&nbsp;</span><span data-testid="content-text"><span>Skyrim&nbsp;</span></span><span data-testid="content-text">was one of the first games to </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/game-mods-can-now-be-sold-on-the-steam-workshop-for-real-money">allow mod creators</a></span><span data-testid="content-text"> to charge real money for game mods on the Steam Workshop. Those mods were&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/valve-changes-its-mind-removes-all-paid-i-skyrim-i-mods-from-steam">later pulled</a></span><span data-testid="content-text">&nbsp;after intense criticism, though Bethesda tried again with the </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/the-pros-and-cons-of-bethesda-s-creation-club">Creation Club</a></span><span data-testid="content-text"> in 2017 for&nbsp;</span><span data-testid="content-text"><span>Fallout 4&nbsp;</span></span><span data-testid="content-text">and later&nbsp;</span><span data-testid="content-text"><span>Skyrim:&nbsp;Enhanced Edition</span></span><span data-testid="content-text">,&nbsp;albeit with some reservations.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The BGSC builds upon the Creation Club, making it so&nbsp;Creators can apply to be a part of the Verified Program. Upon acceptance, they'll have the ability to charge for their creations and receive royalties.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Further, verified creators have fewer restrictions on releasing mods. They won't have to require a patch to release or be restricted on including voice-over; however, they can't be localized in multiple languages and must follow platform restrictions for content and storage.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Not long after&nbsp;</span><span data-testid="content-text"><span>Starfield's&nbsp;</span></span><span data-testid="content-text">release, Bethesda confirmed </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-starfield-i-will-enlist-for-official-mod-support-in-early-2024">mod support</a></span><span data-testid="content-text"> for the game would launch early next year. More than its previous works, it was apparent with this particular game the extent to which&nbsp;</span><span data-testid="content-text"><a target="_blank" href="https://www.polygon.com/23861284/starfield-mod-community-patch-nexus-mods">mods</a></span><span data-testid="content-text">&nbsp;are used to address&nbsp;issues or bugs that Bethesda was unable to fix prior to release.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Clearly, the developer has mods on the brain, but it's unclear when (or if) it'll allow for paid mods in its newest RPG.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Bethesda's FAQ on becoming a Verified Creator can be read </span><span data-testid="content-text"><a target="_blank" href="https://creations.bethesda.net/en/creators/bethesdagamestudios">here</a></span><span data-testid="content-text">.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tinybuild is cutting jobs after an "incredibly challenging year"]]></title>
            <link>https://www.gamedeveloper.com/business/tinybuild-is-cutting-jobs-after-an-incredibly-challenging-year-</link>
            <guid>https://www.resetera.com/threads/tinybuild-is-cutting-jobs-after-an-incredibly-challenging-year.1136352/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/tinybuild-is-cutting-jobs-after-an-incredibly-challenging-year-<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Hello Neighbor publisher Tinybuild is accelerating a cost reduction plan that will result in an unknown number of layoffs.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The company </span><span data-testid="content-text"><a target="_blank" href="https://polaris.brighterir.com/public/tinybuild/news/rns/story/w0jqjnx">broke the news in a trading update</a></span><span data-testid="content-text"> and explained it has been performing "below expectations" and must therefore take "accelerated cost action to re-align investments with expected revenues."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Tinybuild added that "unusually weak trading in October" and a subpar performance in Q4 means full-year revenues will likely stumble, ranging between $40 million to $50 million. It also noted that its Versus Evil subsidiary continues to underperform and has delayed three of four upcoming titles until 2024.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"Since the publication of the Company's interim results in September 2023, the market has deteriorated further and negotiations of certain large contracts have extended into the final month of the year," reads the trading update.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"These remain under negotiation and may not be signed by year end, or at all. The continued underperformance of Versus Evil which delayed into 2024 three out of four games originally planned for release in H2 2023, including the widely anticipated </span><span data-testid="content-text"><span>Broken Roads</span></span><span data-testid="content-text">, also weighed on group performance."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">As of November 2023, Tinybuild had around $5.7 million in cash but expects that stockpile to "decline further due to limited cash inflow from October sales, one-off charges as part of the cost reduction plan and underlying software development investments due in December."</span></p><h2 data-testid="content-text" id="Tinybuild's &quot;incredibly challenging year&quot;">Tinybuild's "incredibly challenging year"</h2><p data-testid="content-paragraph"><span data-testid="content-text">Tinybuild CEO Alex Nichiporchik explained a combination of those factors has turned 2023 into an "incredibly challenging year" for the publisher, and conceded the company ultimately failed to overcome some significant hurdles.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"The whole team at Tinybuild worked tirelessly to release our best products, despite the impact of the war in Ukraine that deeply affected most of us. We couldn't overcome weak demand for video games and the sudden reversal of market dynamics that had favored us over the previous years. We innovated in marketing, refocused our catalogue, and adjusted the cost base as quickly as possible, and, despite these actions, it wasn't enough in such a rapidly evolving market," he said.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Confirming the layoffs, Nichiporchik said it's "physically painful to part ways with colleagues" who have worked tirelessly for Tinybuild, but indicated the cuts are essential if the company hopes to bounce back during a "pivotal stage."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"I am committed to do everything I can to ensure we get through this tough period. We owe it to all our stakeholders now to bounce back and deliver on what Tinybuild can achieve," he added.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Looking ahead, Tinybuild said the outlook for the next fiscal year remains "cautious" due to the likelihood of "continued pressure on discounting in a crowded market for new releases."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"The planned launch of certain promising games in 2024 gives reason for optimism and this coupled with a leaner cost base could translate into strong operating leverage in the event of a recovery in video games sales," concludes the update.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">News Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Game Developer news editor Chris Kerr is an award-winning journalist and reporter with over a decade of experience in the game industry. His byline has appeared in notable print and digital publications including Edge, Stuff, Wireframe, International Business Times, and&nbsp;</span><span data-testid="content-text"><a target="_blank" href="http://pocketgamer.biz/">PocketGamer.biz</a></span><span data-testid="content-text">. Throughout his career, Chris has covered major industry events including GDC, PAX Australia, Gamescom, Paris Games Week, and Develop Brighton. He has featured on the judging panel at The Develop Star Awards on multiple occasions and appeared on BBC Radio 5 Live to discuss breaking news.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Art to Programming Conversation]]></title>
            <link>https://www.gamedeveloper.com/design/the-art-to-programming-conversation</link>
            <guid>https://www.resetera.com/threads/the-art-to-programming-conversation.1136346/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/the-art-to-programming-conversation<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">The first component is the words themselves, and how you decide to have them stored. For the purposes of the game </span><span data-testid="content-text"><span>Rockin’ Racket</span></span><span data-testid="content-text">, on which I am a Programmer and part-time Artist, we used Ink. Ink is a narrative scripting language developed by Inkle Studios. I am in no way an expert on it so if you would like to learn more I suggest reading about it </span><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.inklestudios.com/ink/">here</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">However, the general idea of an Ink file is to structure a text file into a conversation, with each line of text being a line of dialogue, but with the added bonus of having specific use cases for multiple different options for the next line, sections of conversations, and a variable system. Ink files also allow for dependencies, meaning developers can have an Ink file which uses variables from another through the “INCLUDE” keyword. The core of my work was in regards to programmatically reading Ink files within scripts for Unity, which is streamlined through the </span><span data-testid="content-text"><span>ink-Unity Integration</span></span><span data-testid="content-text"> package developed by the same company.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The package compiles Ink files into readable JSON files that, inside scripts, can be converted into Story objects. These Story objects store the current line, variables, and an incredibly handy, line specific type of variable called a tag which is indicated as “#tagName: tagValue”. Each tag is a part of an attribute of the Story that updates for each line. Now that you are more aware of Ink files and their capabilities, I can discuss the dialogue system which I developed for </span><span data-testid="content-text"><span>Rockin Racket</span></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The dialogue system I developed was meant to be a fully independent piece that could be put into a scene, and work with no issue. To achieve this, I have a system of triggers and a manager, wherein the triggers have an attached ink file that, upon being triggered, sends its ink file to the manager object. The manager object deals with both the graphical display of the dialogue, and the programming backend. In order for players to see the dialogue, the UI consists of a main dialogue panel, where in the top left corner is a nametag, the middle of the panel is where lines of dialogue appear, the bottom is where dialogue choice buttons appear, and the center of the right-side is the continue dialogue button. Behind the main panel are two character sprites, a smaller sprite on the left indicates the player character, and a larger sprite across the whole right-side of the screen is the character being spoken to.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To achieve a reactive and dynamic system we used a mixture of ink tags to update the nametag, update the emotions of the speaker, and the layout of the dialogue window. In order to use the ink tags in Unity, you must first process them from the Story object. Luckily, each tag is actually just a string of characters after a # symbol in Ink, and all tags present in a line can be retrieved through the currentTags attribute of the Story object as a list of strings. However, this structure does mean that you must first process tag values, by splitting them, before using them. To split a tag, you can just use the built in “split” String function in Unity, and store the split strings in a length 2 array. The first element at index 0 will be the key for the tag, and the second element at index 1 will be the value. Then, you can set up differing behaviors for different tag keys. After implementing tag processing, I worked with the narrative writer to ensure three tags were present, speaker, portrait, and layout.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The layout tag is obviously used to update the layout which is a simple call to a Unity Animator. Animators in Unity can be used for far more than just importing frame-by-frame animations, but one easy use they can have is to save certain sets of object positions, which is perfect for saving layouts. The other tags are more interesting.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The speaker tag is the name of the character speaking which, depending on the character, updates the nametag to the value given in the tag, and updates the background color of the name tag to match the character speaking, since each main character in </span><span data-testid="content-text"><span>Rockin’ Racket</span></span><span data-testid="content-text"> has a signature color that defines their palette.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The portrait tag is the most complex, but is still relatively straightforward. For starts, each line that changes the portrait tag has to have 2 of them, one for the player character sprite, and one for the other character sprite. However, since each tag is a string, unlike normal variables in programming languages, two different portrait tags will be processed. To determine which sprite Animator to use, the first word of the string is checked to see if it is “harvey”, the name of the player character. If it is, then the animator used is the one that updates the player character sprite, but if it is not, then the animator used is the non-player character sprite. Each animator has a list of recorded animations, and the tag values of tags with key “portrait” are names of the animations, and the manager tells the animator to play the tag value, essentially allowing Ink to tell Unity what to animate next.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The&nbsp; easiest piece is retrieving the next line of dialogue, which is a simple call of the “nextLine” method on the Story object. The return value is a string with that line of dialogue which you can simply update a TextMesh object to display the retrieved value. However, calling it also moves the Story along, meaning you need to handle tags whenever calling this method.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To allow for player input, Story objects also have a currentChoices attribute, wherein you can determine if choices are available at a given line, and how many. By calling this method whenever progressing, you can check whether the line is a simple dialogue continuation, or if you need to show choice options. Implementing choice options is also quite simple, as each choice is set to an index corresponding to their position in the currentChoices list. Then, by setting each choice as its index, you can determine what choice the player makes and call the “chooseChoiceIndex” method on your Story object, using the index of the player choice as input. After it's a simple call of “nextLine” to progress the story to the right dialogue tree! Altogether, this system helps create an adaptable workflow, and opportunities for interesting UI elements!</span></p><p data-testid="content-paragraph"><span data-testid="content-text">If you would like to follow the development progress of </span><span data-testid="content-text"><span>Rockin Racket</span></span><span data-testid="content-text">, you can find the project’s socials below!</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.instagram.com/rockinracket/">Instagram</a></span><span data-testid="content-text">, </span><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://twitter.com/rockinracket">Twitter (X)</a></span><span data-testid="content-text">, </span><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.youtube.com/@RockinRacket">Youtube</a></span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Curves in Games: The Art of Bezier Curves]]></title>
            <link>https://www.gamedeveloper.com/programming/curves-in-games-the-art-of-bezier-curves</link>
            <guid>https://www.resetera.com/threads/curves-in-games-the-art-of-bezier-curves.1136337/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/curves-in-games-the-art-of-bezier-curves<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Pexels user Monstera Production.</span></p></div><div data-module="content" data-testid="article-base-body-content"><h2 data-testid="content-text" id="What is a Bezier curve?">What is a Bezier curve?</h2><p data-testid="content-paragraph"><span data-testid="content-text">Bezier curves are one of the most important concepts in computer graphics, known for their flexibility and precision in representing curves. The foundation of the mathematical principles of Bezier curves are the Bernstein polynomials which were established in 1912. There are countless usages of Bezier curves in the field of computer science, from animating smooth transitions for user interfaces and rendering dynamic fonts, to creating modeling tools.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In basic terms, Bezier curves are defined with a variable number of control points. With just two control points, it forms a straight line, also known as a linear Bezier curve. However, things get more interesting when there are more than two control points. A Bezier curve with three control points is a quadratic Bezier curve, while one with four points is a cubic Bezier curve, and so forth. Quadratic and cubic Bezier curves are particularly popular in tween animations because of their balance between computational simplicity and the capacity to represent an unlimited range of curves.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The parametric equation of a Bezier curve can be written as:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">where:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">B(t) is the point on the Bezier curve at the parameter t.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">n is the degree of the Bezier curve.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">P_i are the control points.</span></p><h2 data-testid="content-text" id="Implementation">Implementation</h2><p data-testid="content-paragraph"><span data-testid="content-text">In this section, we will explore the practical implementation of a Bezier curve using JavaScript. Starting with the binomial coefficient function. We can use a recursive approach due to its simplicity. However, recursion may not be the most efficient for large values due to the potential of stack overflow and excessive function calls. For those cases, an iterative solution would be more suitable. In the case of Bezier curves, the most commonly used variants are the quadratic and cubic ones, so a recursive implementation is enough:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Moving on to the core of our implementation which is the Bezier curve equation itself. To encapsulate our logic, we can create a class called ‘BezierCurve’ that has an array of control points. It also provides a method named ‘getPoint’ that returns a point on the curve with the t parameter as the input. The implementation is shown below:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">With the ‘BezierCurve’ class in place, we now have a basic implementation of a parametric Bezier curve. In order to make things more interesting, below is a simple rendering of our ‘BezierCurve’ class in action:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The graph showcases a cubic Bezier curve, with its shape influenced by the four control points marked in red. In the next section, we will uncover some practical applications of the Bezier curves.</span></p><h2 data-testid="content-text" id="Use Bezier curves for animations">Use Bezier curves for animations</h2><p data-testid="content-paragraph"><span data-testid="content-text">Bezier curves are commonly used in animation engines, offering a way to provide smooth transitions. For example, in web development, CSS provides native support for custom easing functions using Bezier curves. The same goes for software and game development, where UI design requires flexibility and modularity. As an example, a menu pop-up animation might need to start quickly and decelerate towards the end. Implementing such non-linear dynamic animation directly through code can be complex, and might have less control over variables in the animation.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">With Bezier curves, this process can be simplified by defining a curve with four points, starting at (0, 0) and ending at (1, 1) to clamp the animation within a normalized range, and adding two control points to create the desired smooth effects. For the pop-up effect, the two middle control points can be at (0.25, 1) and (0.5, 1) respectively to generate a Bezier curve commonly known as “ease out quad” in CSS and tween engines.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To illustrate this, we will provide an example of how we can apply Bezier curves to a simple linear animation. Consider the following basic JavaScript code snippet that changes the transparency of a circle linearly:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The result animation looks like this:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To enrich this animation with a smoother transition, we can incorporate our ‘BezierCurve’ class by defining an “ease out quad” curve with control points of (0, 0), (0.25, 1), (0.5, 1) and (1, 1). Then replacing the linear alpha transition with the result of the ‘getPoint’ method, we can achieve a more refined animation:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The modification yields an animation that starts quickly and slows down gently.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Besides the common “ease out quad” ease type, there are numerous predefined ease types that can add more characteristics to animations. We can also easily create our own ease types with the help of websites such as https://easings.net/.</span></p><h2 data-testid="content-text" id="Use Bezier curves for movement">Use Bezier curves for movement</h2><p data-testid="content-paragraph"><span data-testid="content-text">Apart from providing smooth animations for applications and games, Bezier curves can also be used to define a curved path for objects in games to move along. Consider a 2D shooter game where some enemies move in different paths. While straightforward paths like a straight line or even a circle can be hard-coded, this approach lacks flexibility and makes adjusting and visualizing the path challenging.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For this case, we can also use Bezier curves to both visualize and design complex paths with ease. Here’s an example of an object moving along a visualized curved path defined by a set of Bezier curve control points:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Here’s a basic idea of how it works: the Bezier curve provides a set of positions based on the t parameter which represents time. By updating the object’s position to correspond with these points, it’s able to traverse through the path smoothly.</span></p><h2 data-testid="content-text" id="Conclusion">Conclusion</h2><p data-testid="content-paragraph"><span data-testid="content-text">That’s all for this post. There are still many other applications of Bezier curves. In conclusion, the flexibility and modularity of Bezier curves make it a powerful tool for developers. It simplifies complex curve equations into easier representations with control points.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">References</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#:~:text=A%20B%C3%A9zier%20curve%20(%2F%CB%88b,by%20means%20of%20a%20formula.">https://en.wikipedia.org/wiki/B%C3%A9zier_curve#:~:text=A%20B%C3%A9zier%20curve%20(%2F%CB%88b,by%20means%20of%20a%20formula.</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">https://easings.net/</span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Some Factors to Managing a Team]]></title>
            <link>https://www.gamedeveloper.com/programming/some-factors-to-managing-a-team</link>
            <guid>https://www.resetera.com/threads/some-factors-to-managing-a-team.1136331/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/some-factors-to-managing-a-team<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Pexels user Helena Lopes.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Introduction</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">As the capstone for the Game Development Specialization for Computer Science majors at Indiana University, I have been working as a Systems Programmer and a Project Manager at Crystalline Games LLC. The company was formed as part of the program, and the capstone/goal of the develop a game from concept to release by the time you graduate. Every team needs proper communication and cooperation, whether it is a massive AAA studio or a small studio of college students who aren’t even getting paid to make the game. As my time with the team lengthened, I took on more managerial responsibilities in alignment with my skills. In this post, I will review some key experiences I learned during this time. As of now, December 2023, the project is still ongoing, so I may come to learn even better ways to help the teams I am part of work together and become efficient.</span></p><h2 data-testid="content-text" id="Balancing Management and Programming Work">Balancing Management and Programming Work</h2><p data-testid="content-paragraph"><span data-testid="content-text">As part of a small team, my role consists of both programming and team management. I work alongside the producer/lead programmer to help delegate programming tasks each week. I also am responsible for the majority of code branch reviews. As a student, there is limited time each week to work on the game, so balancing the management and programming tasks I have each week is vital. Communication plays a key role in this balance. Since I am not the only person who can perform these tasks, I work with the lead programmer each week to get help when needed for them. This is the first buffer to issues with time management for completing tasks for both my roles. If that is not an option for a particular week, the next choice is to prioritize development over review and management tasks. Our game is yet to arrive at an MVP (Minimum Viable Product) status, so we prioritize developing the minimum level of content first. There will be other weeks with extra time available for either me or the lead programmer to complete the management and review work. Depending on the state of your game and the size of your team, you may need, or not need at all, different ways to balance multiple roles and tasks for each week.</span></p><h2 data-testid="content-text" id="Learning What to Expect From Co-Workers">Learning What to Expect From Co-Workers</h2><p data-testid="content-paragraph"><span data-testid="content-text">Especially on an unpaid project with college students, everyone will have a different level of dedication and time available for the project. With this in mind, it is important to keep track of the types of tasks each member struggles with and excels with, and how often people are over/under estimating the work they can complete each sprint. The better aware you are of who is good at what, the easier it will be to delegate tasks without issues. It is also good to keep in mind what parts of the code and systems the person knows well or has been continually working on. The fresher the details of the code, the easier it is to work with.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">&nbsp;Another important thing to be aware from co-workers is the level of communication they provide. Some people need to be directly and explicitly told how and what they need to communicate, or they will not communicate at all. Some people will communicate all their work enthusiastically. Communication is a key component to all team work and even small updates on the timeline of workflow can help with project management. The sooner you can be aware of issues, the sooner they can be resolved or worked around.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">&nbsp;Learning what to expect from your co-workers will help team management run smoothly, and will help prevent issues before they ever happen, especially in small team environments where there is less room for error or overlapping work.</span></p><h2 data-testid="content-text" id="Ask For Help!">Ask For Help!</h2><p data-testid="content-paragraph"><span data-testid="content-text">This is pretty straightforward, don’t be afraid to ask for help from your co-workers! Ask for help as early as you think you may need it. Asking for help is beneficial in two ways, it communicates a potential problem to managerial roles, and it can also get the potential problem solved quicker than it would with asking. It’s quite common to hear “nobody can do everything on their own” and that’s true. That is why we are on a team in the first place. A new mindset helping brainstorm ideas is one of the best ways to problem solve. If team members aren’t available, there are forums like Stack Exchange, or even game developer discord channels where you can ask for help. Many times, whoever you ask will be willing to help, because you are a team or a member of the community, so it never hurts to ask for help. It will make everything run smoother.</span></p><h2 data-testid="content-text" id="Conclusion">Conclusion</h2><p data-testid="content-paragraph"><span data-testid="content-text">The operation of an efficient game development team is extraordinarily difficult to balance. These are a few key factors I have found influence the operations the most. As long as someone on the team can be in charge of managing these communication and coordination worries, the team can operate smoothly.</span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Turning Bugs Into Features]]></title>
            <link>https://www.gamedeveloper.com/programming/turning-bugs-into-features</link>
            <guid>https://www.resetera.com/threads/turning-bugs-into-features.1136325/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/turning-bugs-into-features<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Pexels user Brett Stone.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">This post will review how I took a bug that I needed to fix and turned it into a standout feature for our game.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This August marked my first time working on a game development team built up of more than just programmers, with a goal to create more than just a tech demo. With that in mind, we came into the project part-way through, initially tasked with cleaning up the code work done by designers, rather than programmers. During that cleanup, I found a bug that was funny enough to share with other team members, to the point where some of them asked if I was able to make that a feature instead. To be brief, the player character is able to possess objects in the game in order to mess with surrounding victims. The bug occurred when the player would sometimes leave the objects, and the objects would launch themselves in a random direction.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">First, design work was required. How was this issue going to be turned into a player action? The basic idea was an object that the player could possess and launch at the victims, as a projectile rather than a new mode of transport. Because we want this object to fit neatly into a system of other objects like it, it’s important to work as much within the system as possible. For instance, each possessable inherits from a parent possessable class, with it’s own serialized requirements. Below is what that looks like in the inspector.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Once we have the basic idea and this system requirements, we can actually begin creating this object. The MovementSystem type determines what happens when the player uses WASD to control the object. For this object, since the goal is to launch it, it didn’t make much sense for it to move on its own, so it has its own aiming movement type. This just rotates the object with A and D. Next was a way for the player to see where they’re aiming, which as a placeholder worked as a simple geometric shape in the direction the player faces. This early model looked something like this.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The launching is next. Objects can have an ability, like pulling victims toward them, that the player can activate. In this case, that would be the launching. The code here is relatively simple to start, merely to apply force in the direction the player faces.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The more difficult part is actually triggering an interaction with the victims. The system at the time would activate a trigger sphere around the object to scare victims in the vicinity. Initially, I attempted a design where the player would exit the object as they launched it, to seem more like it was thrown. But because of system limitations, the zone to trigger wouldn’t be accessible if the player were not possessing that object. So instead of reworking the framework of the entire project, I thought to try changing the design instead. This came in the form of a trigger zone that worked on a timer, and during that time would affect any victim in it’s radius. This became known as a LastingEmotionZone, and is still used elsewhere in the project.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This implementation worked decently, but two problems came about. The first was that other branches were moving along, and new changes to the system meant new ones were needed in my design as well. Most notable was the change making possessable objects kinematic while not being possessed, which meant that the player leaving before launch wasn’t going to work the same. The second was determining when the player could launch, as without a ground check, something like this could happen:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">&nbsp;The first problem was not so hard to solve, as the design was just changed so that the player remained in the object on launch. This resulted in leap-frog type movement that felt fun and different. The second was not as easy as it seemed. I looked at multiple ground check options, firstly being a layer mask. Though consistent, the issue is that I am not in charge of the art team, so while they add assets and make changes to the scene, it can be difficult to ensure that everything the player is supposed to land on has the correct layer tag. The second method was a sphere check, but the sphere was either too small, getting the player stuck on ledges, or too big, and giving false positives way off of the ground. I ended on a checkbox, as it got the closest size I wanted with the least conflict. (As a side note, the design had been fleshed out to a desk bell, which would make a ‘ding’ sound upon striking a victim).</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The last key problem to fix in testing was balance. Though the object functioned, it wasn’t very easy or fun to use yet. It was hard to actually hit a victim with the small object. To remedy this, I added a homing function, so when the bell got close it would be pulled to the victim for an easy hit. With this, the object was finally available for testing! We brought the game to a showcase at one of Indiana University’s First Thursdays, and the bell was a resounding success! After multiple iterations and facing some tough bugs in implementation, it was great to see success on the other side, having now turned a bug to fix into a flagship feature for our project.</span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Starbreeze to develop and self-publish Dungeons & Dragons co-op game]]></title>
            <link>https://www.gamedeveloper.com/business/starbreeze-to-develop-and-self-publish-dungeons-dragons-co-op-game</link>
            <guid>https://www.resetera.com/threads/starbreeze-to-develop-and-self-publish-dungeons-dragons-co-op-game.1136316/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/starbreeze-to-develop-and-self-publish-dungeons-dragons-co-op-game<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Starbreeze Studios.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://www.starbreeze.com/news/starbreeze-to-develop-and-publish-game-based-on-the-dungeons-dragons-ip/">Starbreeze Studios</a></span><span data-testid="content-text"> is trading in its crime masks for dice. The Payday developer will be developing and self-publishing a game based on Wizards of the Coast's Dungeons &amp;&nbsp;Dragons, with a planned release window of 2026.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Currently known as&nbsp;</span><span data-testid="content-text"><span>Project Baxter,&nbsp;</span></span><span data-testid="content-text">the game will be a co-op live-service game running on Unreal Engine 5. Interestingly, Starbreeze says it'll release on "all major platforms," potentially&nbsp;leaving the room open for it being a cross-generation title down the line.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"When looking at prospective IPs for our future projects, Dungeons &amp; Dragons was always at the top of our list,"&nbsp;wrote Starbreeze CEO&nbsp;Tobias Sjögren. "Development of the game is in full swing, and we are excited to deliver an amazing Dungeons &amp; Dragons action-adventure in 2026."</span></p><h2 data-testid="content-text" id="Is Starbreeze making the right roll with Dungeons &amp;&nbsp;Dragons?">Is Starbreeze making the right roll with Dungeons &amp;&nbsp;Dragons?</h2><p data-testid="content-paragraph"><span data-testid="content-text">The success and acclaim of Larian Studios'&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/production/larian-studio-ceo-swen-vincke-pushes-back-on-i-baldur-s-gate-iii-i-being-standard-for-games">Baldur's Gate 3</a></span><span data-testid="content-text">has clearly invigorated Wizards and its prospects for D&amp;D games. At the start of the year, it was reported the TTRPG published canceled a number of </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/wizards-of-the-coast-reportedly-canceled-5-games-in-development">D&amp;D game projects</a></span><span data-testid="content-text">, at least two of which were from external developers.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Baldur's Gate 3&nbsp;</span></span><span data-testid="content-text">was just one game, but Starbreeze specializes in creating games with a surprisingly long tail. By keeping&nbsp;</span><span data-testid="content-text"><span>Payday 2&nbsp;</span></span><span data-testid="content-text">going for a decade, it </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/how-a-game-engine-switch-up-brought-starbreeze-to-its-knees">kept itself afloat</a></span><span data-testid="content-text"> and is now in a position to work on (and </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/starbreeze-studios-announces-return-to-game-publishing">publish</a></span><span data-testid="content-text">) </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/starbreeze-muses-new-ip-buys-after-going-all-in-on-payday">multiple projects</a></span><span data-testid="content-text">.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">A co-op D&amp;D game was previously attempted with&nbsp;Invoke Studios'&nbsp;</span><span data-testid="content-text"><span>Dungeons &amp; Dragons:&nbsp;Dark Alliance.&nbsp;</span></span><span data-testid="content-text">After the release of an expansion in 2022, support for it appears to have effectively ended.&nbsp;Invoke is making&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/how-a-game-engine-switch-up-brought-starbreeze-to-its-knees">another D&amp;D title</a></span><span data-testid="content-text">, though it's currently unclear if it'll be co-op again.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">More than anything, the true question surrounding&nbsp;</span><span data-testid="content-text"><span>Baxter&nbsp;</span></span><span data-testid="content-text">is what </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/what-the-heck-is-happening-with-live-service-games-">the state of live service games</a></span><span data-testid="content-text"> will look like by the time 2026 comes around.&nbsp;</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Managing Art when the Design is behind]]></title>
            <link>https://www.gamedeveloper.com/design/managing-art-when-the-design-is-behind</link>
            <guid>https://www.resetera.com/threads/managing-art-when-the-design-is-behind.1136310/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/managing-art-when-the-design-is-behind<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">This is a blog based on my experience as the Lead Artist of an indie project with a bit of a rocky development. While we had a vision for what we wanted the game to be, we lacked designers to help meet that vision from a gameplay perspective; and the most difficult thing we learned from this experience is that when the design is behind, everyone is behind. With little framework of design to go off of for asset creation and ideation of the environment and art structure for the game, I had to navigate how to delegate tasks for UI, Environment and Prop art throughout the game.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For context, the setting of my game changed multiple times across its development, which meant that environment assets couldn’t be locked in until later on. The primary action in the game is to possess interesting objects, and cause reactions from victims with them. With the changing settings and level layout over and over, it was hard to solidify these, too. From graveyards, to restaurants, to factories, to finally, a hotel, we had a lot of vastly differing ideas in mind for what our levels looked like from time to time throughout development.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The biggest problem with this, as I’ve started to detail, was how to get ahead at all on the art direction for the game, while also ripping up and replacing our design and intentions for the level over and over. This was a huge time sink for us, and I made a lot of mistakes in the process of handling this. The *wrong* thing to do is to spend time making assets that there is no confident design for, as there is a high chance those assets will be scrapped. It’s even worse to task other artists with doing this, only to later have to tell them that they have to completely redo it for a new vision, or that their work won’t make it in at all anymore. While the trial and error was a beneficial learning experience for us, it’s something I think definitely doesn’t need to happen twice.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">So, the solution, in the easiest way of describing it, I believe is to delegate a list of what is most integral to the core game, and to really hone in on that. The creation of mood boards, key art pieces, concept sketches for different environments and things like such are integral to maintaining a vision for a project, but especially for locking it in. Something that we lacked a lot in the beginning was confidence on the setting, and I think establishing that first is most important tho making a cohesive project where the work done art wise is important and will match the final vision.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This works for the foundation, of course, but even deeper than that, there’s the approach to handling this from the Lead Artist position. Allocating time to research and reference gathering has proven to be a good allocation of time for artists who are blocking on design, especially since doing so, while it feels like stalling, will only benefit the final product. With the artists more confident in the work they are producing, they make much more cohesive pieces for the overall project than if they tried to create things with little footing. Beyond this, creating generic, but necessary asset lists also create a good foundation of where to put in work when the main hero pieces cannot be created yet because of the lack of design. Even if the environment cant be fully fleshed out yet, generic props like rocks, trees, doors, fences, etc are ones that can be universally used across vastly different environments, which allows more confidence that the work isn’t running the risk of being void later on. This makes for more enthusiasm in approaching tasks, as well as more confidence in the art direction for the game as a whole. No one likes to spend hours making art that gets tossed away in the end.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">With a focus on allocating artists time to meaningful work and also making sure their time is spent productively, good work can still be done even on a project that is lacking in design. Prioritizing the vision and solidifying that early can ensure that artists have a cohesive image of what they’re working towards and makes for easier task delegation on how to get people working towards the finish goal, and not aimlessly tossing work around and praying that some of it is able to stick and make it through.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This is a bit into my mind of what I learned while working from my own personal experience with this issue! I hope it helps in any way for people who might be struggling with the same, I completely understand the frustration and burnout it can cause. Try your best to pull through!</span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making a Vocal Synthesizer Sing Nonsense in a Video Game]]></title>
            <link>https://www.gamedeveloper.com/audio/making-a-vocal-synthesizer-sing-nonsense-in-a-video-game</link>
            <guid>https://www.resetera.com/threads/making-a-vocal-synthesizer-sing-nonsense-in-a-video-game.1136301/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/audio/making-a-vocal-synthesizer-sing-nonsense-in-a-video-game<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">You’re probably wondering why I am using a vocal synthesizer at all in a video game, but let me explain. This year I was given the opportunity to start creating songs for a music-heavy game called </span><span data-testid="content-text"><span>Rockin’ Racket</span></span><span data-testid="content-text">. One of the characters, Haley, is the vocalist for a pop punk band of the same name. I knew immediately that the songs from this band needed vocals that would represent Haley. How would I approach this? Well, I knew nothing about actual vocals so I opted for something that I am extremely comfortable with: vocal synthesizers. I have been working with vocal synths for around a decade, but never for anything outside of leisure. I thought I could challenge myself by using a vocal synth to help create the vocals that would express the unique singing style of Haley.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">It started with some samples. I was unsure how familiar the other members were with the way vocal synths sound. This led me to create some short clips of the voice library singing melodies I wrote into the program. I chose to use the Synthesizer V Kasane Teto voice library provided by AH-Software Co. Ltd. with synthesized vocal samples of Oyamano Mayo. In these short clips, I adjusted various parameters that would change the voice’s timbre. After getting feedback from the group, I settled on a specific parameter set. Now that I had the sound where we wanted it, how was I going to create lyrics? This game plans on having beep speak. You know, like the beeps and squeaks that Nintendo’s </span><span data-testid="content-text"><span>Animal Crossing</span></span><span data-testid="content-text"> games have. That means that I did not want English lyrics or anything remotely discernable from the vocals. Let the gibberish madness begin.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I began with consonant-vowel (CV) strands like </span><span data-testid="content-text"><span>ba bi bu be bo </span></span><span data-testid="content-text">that eventually evolved into consonant-vowel-consonant strands like </span><span data-testid="content-text"><span>bak tak nan tan</span></span><span data-testid="content-text">. I wanted it to somehow say words similar or sounding like English, but ever so slightly off so that the listener could never actually tell. This was difficult at first because I am mainly used to creating songs with discernable lyrics in either English or Japanese (and even Spanish at times). Purposefully making a song with nonsense gibberish as the lyrics was harder than I thought. Then, the question became: what sounds cool? What sounds different from what I’m used to hearing? What are some interesting combinations that you don’t commonly hear in English or Japanese? This is what led to something hilariously chaotic.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Synthesizer V has a feature where you can put multiple syllables into one note and the vocal synth will mash those syllables into the length of it. This might sound confusing, but imagine fitting </span><span data-testid="content-text"><span>supercalifragilisticexpialidocious</span></span><span data-testid="content-text"> in a single quarter note at 120 beats per minute. The result is quite interesting. This created what sounds like a free verse rap section in a pop punk piece which I found to be perfect for something as oppositional and rebellious as the genre itself. I had to purposefully break a previously conditioned habit of keeping everything in a nice and even meter. Because of this, it took me a while to go, “Hey, what if I just didn’t follow common musical/lyrical ideas?” Thus, the basis for the nonsense lyrics of this game had been created. Next time you choose to create a song for any piece of media, ask yourself what you can do differently that would go against what’s common. You might just find something as interesting as I did!</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For more information about Kasane Teto and SynthV, check out the following sites:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://kasaneteto.jp/">https://kasaneteto.jp/</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://dreamtonics.com/synthesizerv/">https://dreamtonics.com/synthesizerv/</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Want to take a look at what we have made so far? Be sure to check out our socials:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.youtube.com/@RockinRacket">https://www.youtube.com/@RockinRacket</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://twitter.com/rockinracket">https://twitter.com/rockinracket</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.instagram.com/rockinracket/">https://www.instagram.com/rockinracket/</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">For a glimpse of my work, check out my site:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://wrightsman-nicholas.weebly.com/">https://wrightsman-nicholas.weebly.com/</a></span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dauntless developer Phoenix Labs has laid off 34 support workers]]></title>
            <link>https://www.gamedeveloper.com/business/dauntless-developer-phoenix-labs-has-laid-off-34-support-workers</link>
            <guid>https://www.resetera.com/threads/dauntless-developer-phoenix-labs-has-laid-off-34-support-workers.1136298/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/dauntless-developer-phoenix-labs-has-laid-off-34-support-workers<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Dauntless</span></span><span data-testid="content-text"> and </span><span data-testid="content-text"><span>Fae Farm </span></span><span data-testid="content-text">developer Phoenix Labs has laid off 34 employees across its support teams.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://www.gamesindustry.biz/phoenix-labs-lays-off-34-staff">The studio confirmed the news to GamesIndustry.biz</a></span><span data-testid="content-text"> and said the layoffs were made after a "rigorous review" of its internal structures.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"We have made the tough decision to reduce our workforce by a total of 34 people, across our publishing, HR, IT, and shared services teams," said a company representative.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"Our games teams were unaffected and our work continues across our titles at Phoenix Labs. </span><span data-testid="content-text"><span>Fae Farm's</span></span><span data-testid="content-text"> DLC and </span><span data-testid="content-text"><span>Dauntless</span></span><span data-testid="content-text"> updates are on track, and we have exciting unannounced projects in the works."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Phoenix Labs thanked those affected for their service and said their "impact will be missed and live on."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The layoffs were made around two months after Phoenix Labs CEO Jesse Houston and COO Jeanne-Marie Owens </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/reshuffle-at-dauntless-dev-phoenix-labs-as-ceo-and-coo-step-down">stepped down for personal reasons</a></span><span data-testid="content-text">. At the time, Houston indicated the studio was well-positioned for the future.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"The future has never looked brighter—we've got an amazing pipeline of games in development and our incredible </span><span data-testid="content-text"><span>Fae Farm</span></span><span data-testid="content-text"> [just launched] for the Nintendo Switch and PC," he said.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This is the second round of layoffs sanctioned by Phoenix Labs in 2023. The studio </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-dauntless-i-dev-phoenix-labs-lays-off-30-employees">axed 30 jobs in May</a></span><span data-testid="content-text"> as it sought to reshuffle its production slate after breaking away from former parent company Garena.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">News Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Game Developer news editor Chris Kerr is an award-winning journalist and reporter with over a decade of experience in the game industry. His byline has appeared in notable print and digital publications including Edge, Stuff, Wireframe, International Business Times, and&nbsp;</span><span data-testid="content-text"><a target="_blank" href="http://pocketgamer.biz/">PocketGamer.biz</a></span><span data-testid="content-text">. Throughout his career, Chris has covered major industry events including GDC, PAX Australia, Gamescom, Paris Games Week, and Develop Brighton. He has featured on the judging panel at The Develop Star Awards on multiple occasions and appeared on BBC Radio 5 Live to discuss breaking news.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fable 3's development was 18 months of regretful compromise]]></title>
            <link>https://www.gamedeveloper.com/business/fable-3-s-development-was-18-months-of-regretful-compromise</link>
            <guid>https://www.resetera.com/threads/fable-3s-development-was-18-months-of-regretful-compromise.1136292/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/fable-3-s-development-was-18-months-of-regretful-compromise<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Lionhead Studios.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Ex-staffers at Lionhead Studios spoke to </span><span data-testid="content-text"><a target="_blank" href="https://www.thegamer.com/the-story-of-fable-3-making-of-cut-content-cast/">The Gamer</a></span><span data-testid="content-text"> about </span><span data-testid="content-text"><span>Fable 3,&nbsp;</span></span><span data-testid="content-text">where they discussed the highs and lows of making the closer to the original fantasy-RPG trilogy.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">released in 2010, a little over&nbsp;two years after&nbsp;</span><span data-testid="content-text"><span>Fable 2</span></span><span data-testid="content-text">. But despite the shorter timeframe, former creative director Dene Carter claimed the issue back then wasn't really crunch; if anything, Lionhead "largely fixed"&nbsp;the process of creating a Fable game by the time of his departure in 2009.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">That sentiment was similarly echoed by gameplay programmer Kostas Zarifis, who said making&nbsp;</span><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">was a smoother cycle than its predecessor. "The ground was finally not so shaky,"&nbsp;he noted, explaining that the tools from the first two games were of great help here.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Sometimes, it's easy to tell when </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/design/the-rise-of-i-dragon-age-ii-i-">sequels</a></span><span data-testid="content-text"> are made in a short development time, either on a presentational or mechanical level. Zarifis pointed out that Lionhead actively avoided doing "</span><span data-testid="content-text"><span>Fable 2,&nbsp;</span></span><span data-testid="content-text">again,"&nbsp;calling it a boon and a burden:&nbsp;"We can't help it. It's kind of a blessing and curse, the Lionhead way."&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Rather than crunch, the past Lionhead staff said they chose to cut where they could. As he has been previously, </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/design/molyneux-we-didn-t-have-the-time-to-craft-i-fable-iii-i-into-what-that-dream-was-">Peter Molyneux</a></span><span data-testid="content-text"> candidly called&nbsp;</span><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">"a third of the size it should've been."&nbsp;He told The Gamer the game's final third wherein players take the throne and rule Albion&nbsp;was severely cut down from its original intended design.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"What we wanted to do is give players the feeling that they could be whatever [royalty] they wanted,"&nbsp;Molyneux explained. After the first act was about players' "claim to power,"&nbsp;the next two would've juggled that responsibility and shown visible consequences like in the first two games.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Instead, Lionhead did enough cutbacks that Molyneux called them "ten mini-events."</span></p><h2 data-testid="content-text" id="Fable 3"><span>Fable 3</span>&nbsp;inherited a troubled throne that ended Lionhead</h2><p data-testid="content-paragraph"><span data-testid="content-text">What did the threequel in, at least as far as Molyneux is concerned, is that he didn't shoot down Microsoft telling them after&nbsp;</span><span data-testid="content-text"><span>Fable 2&nbsp;</span></span><span data-testid="content-text">to "next time, do it on time."&nbsp;To him,&nbsp;that methodology&nbsp;went against the Lionhead spirit of "we make the game, play it, go back to the drawing board, play it, go back to the drawing board."&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Earlier this year, Microsoft came under fire by former 343 Industries employees for the </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/ex-343-developers-call-out-microsoft-for-mismanaging-i-halo-infinite-i-">handling of&nbsp;</a></span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/ex-343-developers-call-out-microsoft-for-mismanaging-i-halo-infinite-i-">Halo Infinite</a></span><span data-testid="content-text">. Speaking to his experience, Molyneux was a little defensive of his former parent company, though his comments were also slightly illuminating of how working under larger studios could be back then (and still can be, in some cases).&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">On one hand, Molyneux said&nbsp;Microsoft "never told you to do something, they just dangled a really lovely golden carrot in front of you if you did something.” But by his own admission, he could've pushed to delay&nbsp;</span><span data-testid="content-text"><span>Fable 3</span></span><span data-testid="content-text"> instead of going for the bonus structure that "incentivized us to hit our dates, rather than hit the quality."&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"It may have been my fault actually,"&nbsp;he said. "I hate the fact that we had all this potential and we didn't do what we should have done, and [said] it needs another year and a half. It needed double the time, basically."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Carter left a year before&nbsp;</span><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">came out, implying his exit was due to "other forces conspiring to make the design of the game painful.&nbsp;From what I heard about what it was like at Lionhead after I left, I was very glad I was no longer working there."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Lionhead </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-fable-i-developer-lionhead-closes-its-doors-for-good">closed its doors</a></span><span data-testid="content-text"> in 2016. The Gamer intends to release a deep dive on the studio's last days in the near future, but until then, its look back on&nbsp;</span><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">can be read </span><span data-testid="content-text"><a target="_blank" href="https://www.thegamer.com/the-story-of-fable-3-making-of-cut-content-cast/">here</a></span><span data-testid="content-text">. The full retrospective dives into the game's interactive UI, audio, and acquiring its star-studded cast.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ability for Other Abilities]]></title>
            <link>https://www.gamedeveloper.com/design/ability-for-other-abilities</link>
            <guid>https://www.resetera.com/threads/ability-for-other-abilities.1136286/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/ability-for-other-abilities<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Going into a project that requires dozens of abilities leads to interesting team dynamics, since the way that each ability interacts with the rest of the game is going to depend on how the team implements it. It raises questions about who should take on the tasks for each ability. For example, if an ability needs to deal damage to an enemy, the team members that developed the enemy system are going to have the best understanding of how to implement said ability. However, if the team delegates all ability implementations to one subset of team members, those members are going to have the best understanding of all the abilities, and each ability will have a similar style of implementation, which can make it easier to adjust functionality later on in the project.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Our team, Crystalline Games, decided to go with the latter approach for our first game, Conquering Ciros. Conquering Ciros is a rogue-like survival game, Vampire Survivors-esque, and so it needs a good amount of unique abilities. I was one of the two programmers delegated to ability programming, and I wanted to describe my process of programming one ability that required a lot more work than any of the others. This experience was interesting for two reasons; it required significantly more interaction with other aspects of the game, and it displayed some pros and cons of how we organized our programming team.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This ability is called Buff Zone, and as the name suggests, it buffs things within a zone. Specifically, it buffs any crystals that are within a certain radius of an object that it spawns. Crystals are items you collect throughout gameplay, and they each have an ability. So right off the bat, Buff Zone is already more than just spawning an object that collides with enemies, which is usually all you need for most abilities.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">First, I needed to check if a crystal was within one of the Zones spawned by Buff Zone. As a side note, Buff Zone spawns a circle in a random position, with a random type, every few seconds, so I needed a way to distinguish what type of circle the crystal was in. I also needed to deal with scenarios where a crystal might be in two different circles at the same time. At face value, this seems straightforward, but because I had no involvement with developing the crystal system, I didn’t realize that crystals lacked any type of collider. They are just generated with a sprite, a script with some general functionality, and a script with specific behavior for the ability.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The workaround for this isn’t difficult, but it is probably less efficient than Unity’s built-in methods of handling collision, and it really makes the code messier and harder to read:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">It looks a lot worse than a simple OnTriggerEnter2D, and this has to take place in Update, which I like to keep clean as much as possible. If I had worked on programming crystals originally, I might have looked at this ability ahead of time and added colliders to the crystals. I think this also stresses the importance of team communication, especially if tasks are so strictly divided between team members.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">&nbsp;Secondly, I wanted to cover a neat optimization I found while programming Buff Zone. I probably would not have found this if everything was just handled by colliders, so at least there’s a silver lining. It helps cut down on the constant updates to check if a crystal needs to be buffed or not. Each crystal needs to be un-buffed if the spawned zone despawns </span><span data-testid="content-text"><span>or </span></span><span data-testid="content-text">if the crystal exits the zone’s radius.</span></p><div data-testid="content-paragraph"><p><span data-testid="content-text">&nbsp;Instead of checking every frame for if a given zone had become null, I took advantage of the despawning coroutine in my ability script, and just wrote a few if statements to catch any crystals that were in the radius before the zone despawned. If any of those crystals were buffed, I just applied the debuff to them. It involved spreading out the buff/debuff code between two scripts, but now the game only has to run these if statements every few seconds, as opposed to every frame.</span></p><p><span data-testid="content-text">This project was my first team-based game dev experience outside of a game jam scenario, but I hope this situation gave some insight into managing team communication, planning, and working around problems that may arise from it.</span></p></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dan Houser's Absurd Ventures sets two transmedia projects for 2024]]></title>
            <link>https://www.gamedeveloper.com/business/dan-houser-s-absurd-ventures-sets-two-transmedia-projects-for-2024</link>
            <guid>https://www.resetera.com/threads/dan-housers-absurd-ventures-sets-two-transmedia-projects-for-2024.1136277/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/dan-houser-s-absurd-ventures-sets-two-transmedia-projects-for-2024<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Absurd Ventures.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Earlier this year, Rockstar Games co-founder </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/production/rockstar-games-co-founder-dan-houser-is-leaving-the-studio">Dan Houser</a></span><span data-testid="content-text"> set up a new transmedia company dubbed </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/rockstar-games-dan-houser-forms-transmedia-studio-absurd-ventures">Absurd Ventures</a></span><span data-testid="content-text">. Months after that announcement, the studio has revealed it's locked in two projects (and "universes")&nbsp;to release next year.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The first is&nbsp;</span><span data-testid="content-text"><a target="_blank" href="https://twitter.com/AbsurdVentures/status/1729910313003446704">American Caper</a></span><span data-testid="content-text"><span>,&nbsp;</span></span><span data-testid="content-text">a graphic novel drawn by DC Comics artist Simon Bisley and a presently unrevealed writer. Absurd describes it as a story of two regular American families caught up in a world of "corrupt business,&nbsp;inept politics and bungling crime."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Absurd's other project is an audio fiction series set in the near future&nbsp;called&nbsp;</span><span data-testid="content-text"><a target="_blank" href="https://twitter.com/AbsurdVentures/status/1729910461037212096">A Better Paradise</a></span><span data-testid="content-text"><span>.&nbsp;</span></span><span data-testid="content-text">The 12-episode show has been deemed an "existential suspense thriller,"&nbsp;though the company provided no other information beyond its co-production partnership with QCode Media.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">While not games like many would likely expect from the game industry veteran, Absurd Ventures' mission statement is to release products that span across multiple mediums. Making&nbsp;triple-A games can be&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-the-last-of-us-part-ii-i-and-i-horizon-forbidden-west-i-cost-200m-each-to-make">notoriously expensive</a></span><span data-testid="content-text">, so graphic novels and podcasts can (theoretically) be a less costly debut for new, unproven properties.</span></p><h2 data-testid="content-text" id="Absurd Ventures and Rockstar alums">Absurd Ventures and Rockstar alums</h2><p data-testid="content-paragraph"><span data-testid="content-text">Both projects come days after the discovery that Absurd added more Rockstar alums to its stable. Earlier in the week, it was </span><span data-testid="content-text"><a target="_blank" href="https://www.begeek.fr/lazlow-jones-et-michael-unsworth-rejoignent-dan-houser-chez-absurd-ventures-389473">reported</a></span><span data-testid="content-text"> that Lazlow Jones and </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/rockstar-games-writing-vp-mike-unsworth-has-departed-company">Michael Unsworth</a></span><span data-testid="content-text"> had joined in the respective roles of executive producer and story/creative management head.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">At Rockstar, Jones was production co-chair and wrote for the Grand Theft Auto and Red Dead Redemption games, along with&nbsp;</span><span data-testid="content-text"><span>Bully&nbsp;</span></span><span data-testid="content-text">and the Max Payne trilogy. Unsworth, who departed this past summer, wrote for the later GTA sequels and Red Dead games, plus </span><span data-testid="content-text"><span>LA Noire&nbsp;</span></span><span data-testid="content-text">and&nbsp;</span><span data-testid="content-text"><span>Max Payne 3</span></span><span data-testid="content-text">.&nbsp;</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Steam dropping support for macOS Mojave and by extension 32-bit games]]></title>
            <link>https://www.gamedeveloper.com/business/steam-dropping-support-for-macos-mojave-and-by-extension-32-bit-games</link>
            <guid>https://www.resetera.com/threads/steam-dropping-support-for-macos-mojave-and-by-extension-32-bit-games.1136271/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/steam-dropping-support-for-macos-mojave-and-by-extension-32-bit-games<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Steam will halt support for macOS 10.13 and 10.14 (better known as High Sierra and Mojave) on February 15, 2024.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The move means existing Steam Client installations on those operating systems will no longer receive updates of any kind, including security updates. </span><span data-testid="content-text"><a target="_blank" href="https://help.steampowered.com/en/faqs/view/743F-2E0E-C9A5-C375">As detailed in a blog post</a></span><span data-testid="content-text">, Valve will also be unable to guarantee Steam will continue working as intended on those unsupported operating systems.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Notably, Mojave is the last version of macOS capable of running 32-bit games, with Apple dropping that particular functionality with the launch of macOS 10.15 in 2019. That means some titles will no longer function on macOS once Valve has cut support for macOS 10.14. &nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"Since many developers have not updated their games to support 64-bit executables, some games will effectively stop functioning on macOS. The Steam store will stop considering games that offer only 32-bit macOS binaries to be Mac compatible at the end of 2023. 98%+ of Steam customers on Mac are already running macOS 10.15 or newer. This means 32-bit only games and applications no longer run on your current operating system," explains&nbsp;Steam Support.</span></p><h2 data-testid="content-text" id="Steam advices Mac users to update their OS">Steam advices Mac users to update their OS</h2><p data-testid="content-paragraph"><span data-testid="content-text">"In order to ensure continued operation of Steam and new 64-bit games purchased through Steam, users on these older versions should update to a more recent version of macOS. We expect the Steam client and games on these older operating systems to continue running for some time."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Valve reiterated that it will be unable to guarantee the "continued functionality" of 32-bit macOS titles after February next year, but said it needs to drop High Sierra and Mojave due to a lack of certain macOS features and security updates that are only present in macOS 10.15 and above.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The company is encouraging all High Sierra and Mojave users to update "sooner rather than later" and noted that Apple ended security updates and technical support for both operating systems in December 2020 and October 2021, respectively.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"Computers running these operating systems, when connected to the internet, are susceptible to new malware and other exploits which will not be patched," it continued. "That malware can cause your PC, Steam and games to perform poorly or crash. That malware can also be used to steal the credentials for your Steam account or other services."</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">News Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Game Developer news editor Chris Kerr is an award-winning journalist and reporter with over a decade of experience in the game industry. His byline has appeared in notable print and digital publications including Edge, Stuff, Wireframe, International Business Times, and&nbsp;</span><span data-testid="content-text"><a target="_blank" href="http://pocketgamer.biz/">PocketGamer.biz</a></span><span data-testid="content-text">. Throughout his career, Chris has covered major industry events including GDC, PAX Australia, Gamescom, Paris Games Week, and Develop Brighton. He has featured on the judging panel at The Develop Star Awards on multiple occasions and appeared on BBC Radio 5 Live to discuss breaking news.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Creating a Scalable Framework for Puzzle Levels]]></title>
            <link>https://www.gamedeveloper.com/programming/creating-a-scalable-framework-for-puzzle-levels</link>
            <guid>https://www.resetera.com/threads/creating-a-scalable-framework-for-puzzle-levels.1136265/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/creating-a-scalable-framework-for-puzzle-levels<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p>Islands of Insight (left), Understanding (right)<span></span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">I love puzzles, so when I decided to start a game development project on my own this year, I wanted it to be a puzzle game. As I am working on this on my own and at the same time as working on other projects for classes, I decided to go with a simple blocky puzzle style inspired by the game Understand and some puzzles from Islands of Insight.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">From the beginning this project wasn’t just about the final product. I wanted to learn better practices for scalable and maintainable code. I started as many Unity projects do, by placing objects (in my case tiles in a grid) into the scene, giving them placeholder images, and attaching scripts to make them respond to inputs. But as I expanded the scope of the project I added some useful “containers” for information that I would be regularly using. To start I turned those starting tiles into a handy object Unity calls a prefab, so that I could make changes to them all at once. Next I wrote a “Level” script that would take as inputs a number of rows and columns and generate a correctly sized and proportioned grid, allowing me to create new levels within seconds and without having to make dozens and dozens of repeated objects or scenes.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">But of course I wanted a level to have more information than just how many rows and columns it would contain. I wanted levels to have added challenges like fixed tiles that couldn’t be changed by the player, numbered tiles like in Islands of Insight, and possibly even gaps where tiles in the grid were entirely removed. To accomplish this I created another kind of Unity container, this time a scriptable object that I called “Level Data.” Below I have an example of one of these Level Datas and its corresponding grid, where tiles with a red square in them are fixed tiles.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Of course levels in a puzzle game aren’t any good unless they have corresponding rules that you have to follow in order to solve the puzzle. In Islands of Insight these rules are relatively straightforward and given to you on the right of your screen with helpful images. In Understand however, these rules are intentionally hidden from you. The only information Understand gives you is how many rules you have to follow, and the only feedback it gives you is which rules you are currently breaking. This means that part of the puzzle is just figuring out what the rules are!</span></p><p>Understand’s rules are just circles that are filled when completed</p><p data-testid="content-paragraph"><span data-testid="content-text">Understand’s rules are just circles that are filled when completed</span></p><p>Islands of Insight tells you its rules</p><p data-testid="content-paragraph"><span data-testid="content-text">Islands of Insight tells you its rules</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I chose to go with Understand’s hidden rules mechanic because it is very interesting to me, but I also took several rule Ideas from Islands of Insight to use with my numbered tiles, which were also taken from that game. Once again though, I was trying to push myself to make a scalable game, so part of my rules undertaking was to make rules that I could quickly and easily add or swap out in my levels to test different challenges and easily make new levels with. This was definitely the most time consuming part of my project, but what I eventually settled on was one big script that</span></p><p data-testid="content-paragraph"><span data-testid="content-text">contained functions representing each rule.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For this to work, each function would need to take the same inputs and return the same outputs, so that my game wouldn’t need to care what rule it happened to be. The output was easy, each rule would return true or false, true if the rule was satisfied, false otherwise. For the input though, each rule would need different information from the level. My “No Three in a Row Black” rule needs different information than my “Numbers Area Size” rule which says that each numbered tile must be connected to a number of same colored tiles exactly equal to its number. So I created another container which would act as the input for all of my rule functions, this one I called “Grid Data” which would contain all the relevant information from the level</span></p><p data-testid="content-paragraph"><span data-testid="content-text">such as the state of each tile (true = black, false = white, null = empty) and the positions of each numbered tile on the board.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">All that was left at this point was to figure out how I would assign these rules to my levels and how I would pass the relevant function to my Level Manager script. There wasn’t a clean way to choose functions from the Unity’s Inspector, so after putting in so much effort to make my code clean and simple, I finally broke and created an enum which would contain the names of every function and which I would have to manually update whenever I changed the name of a function or added a new one. With this small breach of my core promise for this project, all I had to do was use Unity’s very useful “CreateDelegate” function to call my rule functions by the name I chose from the enum.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Finally I had a complete framework from which I could make as many levels as I wanted. The beauty of the way that I created my project was that I could now create new Tile prefabs with different shapes or colors, add them to a level, and play it all within a minute. I could make new rules and then immediately add them to a level to test. I’ve included a gif below to show just how easy it would be if I wanted to change a rule or change the tiles in a level.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">If you want to see more games from me or want to play the game when I release a demo, you can follow me at </span><span data-testid="content-text"><a target="_blank" href="https://hamiltongilbert.itch.io/">https://hamiltongilbert.itch.io/</a></span><br></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dragon's Dogma II will be Capcom's first current-gen, $70 release]]></title>
            <link>https://www.gamedeveloper.com/business/dragon-s-dogma-ii-will-be-capcom-s-first-current-gen-70-release</link>
            <guid>https://www.resetera.com/threads/dragons-dogma-ii-will-be-capcoms-first-current-gen-70-release.1136259/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/dragon-s-dogma-ii-will-be-capcom-s-first-current-gen-70-release<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">When </span><span data-testid="content-text"><span>Dragon's Dogma II&nbsp;</span></span><span data-testid="content-text">releases on March 22, 2024, it'll be the first $70 game from developer Capcom.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The Japanese studio held a livestream reveal for the sequel to the 2012 cult classic, revealing its price point not long after. Thus far, Capcom has stuck to the $60 pricing that was common for triple-A games for the last 15 years before Sony bumped up the price of its first-party titles with the launch of the PlayStation 5.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">While some studios like 2K were quick to follow suit, others took their time in going up to $70. Ubisoft and Microsoft gave prior notice, revealing they'd increase price with specific games such as&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/first-party-xbox-series-x-s-games-will-be-70-starting-2023">Starfield</a></span><span data-testid="content-text">and&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/ubisoft-will-price-current-gen-games-at-70">Skull &amp; Bones</a></span><span data-testid="content-text">(which, due to its repeated delays, has since been replaced with&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-avatar-frontiers-of-pandora-i-is-ubisoft-s-first-70-possibly-digital-only-game">Avatar: Frontiers of Pandora</a></span><span data-testid="content-text">).&nbsp;</span></p><h2 data-testid="content-text" id="Capcom takes its first steps toward the&nbsp;current console age">Capcom takes its first steps toward the&nbsp;current console age</h2><p data-testid="content-paragraph"><span data-testid="content-text">Notably,&nbsp;</span><span data-testid="content-text"><span>Dragon's Dogma II&nbsp;</span></span><span data-testid="content-text">will also be Capcom's first game released solely for the current generation (read:&nbsp;PlayStation 5 and Xbox Series X|S) consoles. Its 2023 titles like&nbsp;</span><span data-testid="content-text"><span>Street Fighter 6&nbsp;</span></span><span data-testid="content-text">and&nbsp;</span><span data-testid="content-text"><span>Resident Evil 4 Remake&nbsp;</span></span><span data-testid="content-text">have released on those consoles and their last-gen predecessors, the PlayStation 4 and Xbox One.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">As with game pricing, leaving the previous generation behind has taken longer than expected. While first-party developers at Microsoft and Sony are now</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/no-xbox-owned-studios-are-making-games-that-run-on-xbox-one">&nbsp;focused</a></span><span data-testid="content-text"> on the XSX|S and PS5 (and a </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/report-nintendo-is-introducing-external-developers-to-switch-2">Nintendo Switch successor</a></span><span data-testid="content-text"> is waiting in the wings), third-party developers still have one foot in the door, so to speak.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Many of last year's big releases will still come out&nbsp;for PS4 and Xbox One, and even current-gen 2023 games like&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/ea-is-bringing-star-wars-jedi-survivor-to-last-generation-consoles">Star Wars Jedi:&nbsp;Survivor</a></span><span data-testid="content-text">and&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-call-of-duty-modern-warfare-iii-i-is-deploying-to-last-gen-consoles-too">Call of Duty:&nbsp;Modern Warfare III (2023)</a></span><span data-testid="content-text">will (or already did)&nbsp;release on the previous consoles.&nbsp;</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Unity is eliminating 265 jobs and terminating Weta FX partnership]]></title>
            <link>https://www.gamedeveloper.com/business/unity-is-eliminating-265-jobs-and-terminating-weta-fx-partnership</link>
            <guid>https://www.resetera.com/threads/unity-is-eliminating-265-jobs-and-terminating-weta-fx-partnership.1136253/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/unity-is-eliminating-265-jobs-and-terminating-weta-fx-partnership<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Engine maker Unity will cut around 3.8 percent of its global workforce, totaling 265 roles, after ending an agreement with digital effects company Weta FX.&nbsp;&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://www.reuters.com/technology/unity-software-cut-38-staff-company-reset-2023-11-28/">As reported by Reuters</a></span><span data-testid="content-text">, Unity is terminating the 'professional services' agreement it signed with Weta FX after </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/unity-has-wrapped-up-its-acquisition-of-weta-digital">purchasing the company's VFX tools and development division in 2021</a></span><span data-testid="content-text">.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://d18rn0p25nwr6d.cloudfront.net/CIK-0001810806/47b1988d-76ce-4888-8ea1-90af28aa2550.pdf">The move was confirmed in an SEC filing</a></span><span data-testid="content-text">, which states that Unity has "terminated its obligations to provide certain services to Weta FX and also amended certain intellectual property rights between the parties."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"[Unity] will recognize deferred revenue and additional consideration in connection with the amendments of approximately $114 million, and will expense the recorded cost of a related contract intangible asset of approximately $131 million, which will occur in the fourth quarter of 2023," it continues.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">That same filing also confirms that Unity plans to shutter corporate offices in approximately 14 locations as it evaluates its real estate footprint. The costs and charges associated with those closures include potential early termination provisions, which Unity says "cannot be reasonably estimated at this time."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Unity notes that some employees impacted by the office closures will have the option to become fully remote unless their role is viewed as "location-dependent."&nbsp;This isn't the first time Unity has sanctioned layoffs in 2023, with the company also </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/unity-laying-off-600-workers-in-search-of-long-term-and-profitable-growth-">cutting 600 jobs back in March</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The news comes just a few weeks after Unity confirmed it was </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/unity-is-reviewing-its-product-portfolio-and-says-layoffs-are-likely-">reviewing its product portfolio</a></span><span data-testid="content-text"> and stated that layoffs were "likely."&nbsp;That review was announced by interim CEO Jim Whitehurst, who stepped up following the </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/unity-ceo-and-president-john-riccitiello-is-leaving-the-company">recent departure of John Riccitiello</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Riccitiello stood down&nbsp;after Unity attempted to introduce a controversial new runtime fee that left developers reeling, with notable creators and companies threatening to drop the engine over the policy.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Unity eventually </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/unity-apologizes-to-devs-reveals-updated-runtime-fee-policy">back-pedaled and tweaked its runtime fee</a></span><span data-testid="content-text"> in an attempt to ease concerns, but its&nbsp;slapdash messaging and failure to engage with developers during the furore has left the company with a mountain to climb when it comes to rebuilding trust.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">News Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Game Developer news editor Chris Kerr is an award-winning journalist and reporter with over a decade of experience in the game industry. His byline has appeared in notable print and digital publications including Edge, Stuff, Wireframe, International Business Times, and&nbsp;</span><span data-testid="content-text"><a target="_blank" href="http://pocketgamer.biz/">PocketGamer.biz</a></span><span data-testid="content-text">. Throughout his career, Chris has covered major industry events including GDC, PAX Australia, Gamescom, Paris Games Week, and Develop Brighton. He has featured on the judging panel at The Develop Star Awards on multiple occasions and appeared on BBC Radio 5 Live to discuss breaking news.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Report: Embracer shutting down Free Radical Design by Xmas]]></title>
            <link>https://www.gamedeveloper.com/business/report-embracer-shutting-down-free-radical-design-by-xmas</link>
            <guid>https://www.resetera.com/threads/report-embracer-shutting-down-free-radical-design-by-xmas.1136247/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/report-embracer-shutting-down-free-radical-design-by-xmas<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Free Radical Design/EA.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">A new report from </span><span data-testid="content-text"><a target="_blank" href="https://www.videogameschronicle.com/news/embracer-ceo-confirms-timesplitters-studio-faces-closure-before-christmas/">VGC</a></span><span data-testid="content-text"> claims </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/report-timesplitters-dev-free-radical-may-shut-down-again">Free Radical Design</a></span><span data-testid="content-text"> will be shutting down on December 11. The studio, best known for the TimeSplitters franchise, was under evaluation by parent company Embracer to see if it warranted closure.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Sources speaking to the outlet allege that Embracer CEO Lars Wingfors privately confirmed Free Radical's closure in a company-wide email. In it, he notes the "potential closure"&nbsp;on the December 11 date, calling it a "challenging time for all of us but especially for you, and our focus is to support you as much as we can during this transition."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">UK law required Plaion (the umbrella company that runs Free Radical)&nbsp;to consult Free Radical employees first at least 30 days&nbsp;before making redundancies. At time of writing, it remains possible that an interested party may acquire the Nottingham, UK-based studio.&nbsp;</span></p><h2 data-testid="content-text" id="Free Radical staff are looking for work">Free Radical staff are looking for work</h2><p data-testid="content-paragraph"><span data-testid="content-text">Even so, VGC noted that a majority of&nbsp;Free Radical staff have already put out the notice that they're looking for work, with 55 of 100 employees reportedly announcing they're looking for employment.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Free Radical was </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/deep-silver-reforms-i-timesplitters-i-dev-free-radical-with-original-founders">revived by Plaion</a></span><span data-testid="content-text"> in 2021 for the specific purpose of creating a fourth TimeSplitters game. The first-person shooter series was started by the original Free Radical during the mid-2000s. The studio closed in 2008 following the release of the PlayStation 3 shooter&nbsp;</span><span data-testid="content-text"><span>Haze</span></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Presently, it's unknown what will become of the new TimeSplitters project should Free Radical close down a second time. Game Developer has reached out to Embracer for comment and will update when a response is given.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>