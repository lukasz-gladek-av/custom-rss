<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Tue, 29 Oct 2024 16:39:44 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Deep Dive: Masterminding the fluid movement system behind Echo Point Nova]]></title>
            <link>https://www.gamedeveloper.com/design/deep-dive-the-movement-of-echo-point-nova</link>
            <guid>https://www.resetera.com/threads/deep-dive-masterminding-the-fluid-movement-system-behind-echo-point-nova.1022151/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/deep-dive-the-movement-of-echo-point-nova<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Greylock Studio.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Game Developer Deep Dives are an ongoing series with the goal of shedding light on specific design, art, or technical features within a video game in order to show how seemingly simple, fundamental design decisions aren’t really that simple at all.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Earlier installments cover topics such as </span></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-developing-a-rating-system-and-recording-tv-in-the-crush-house">developing a rating system and making juicy TV in </a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-developing-a-rating-system-and-recording-tv-in-the-crush-house">The Crush House</a></span><span data-testid="content-text">, </span><span data-testid="content-text"><span>the </span></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-how-custom-tools-made-the-2d-photo-mode-of-a-highland-song-sing">development of custom tools for the 2D photo mode of</a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-how-custom-tools-made-the-2d-photo-mode-of-a-highland-song-sing"> A Highland Song</a></span><span data-testid="content-text">, </span><span data-testid="content-text"><span>and </span></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-refreshing-the-crusader-kings-iii-tutorial-mode-through-optimized-ux">refreshing the</a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-refreshing-the-crusader-kings-iii-tutorial-mode-through-optimized-ux"> Crusader Kings III </a></span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/design/deep-dive-refreshing-the-crusader-kings-iii-tutorial-mode-through-optimized-ux">tutorial mode through optimized UX</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>In this edition, </span></span><span data-testid="content-text">Echo Point Nova</span><span data-testid="content-text"><span> creator Matt Larrabee tells us about the combination of camera effects, sound FX, and VFX that create the game's smooth and high octane movement system.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Hi I’m Matt Larrabee, the creator of </span><span data-testid="content-text"><a target="_blank" href="https://store.steampowered.com/app/1836730/Echo_Point_Nova/">Echo Point Nova</a></span><span data-testid="content-text">, an open world FPS made in Unreal Engine 4, and today I’d like to talk to you about how I developed a popular feature of my game, the movement system.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Echo Point Nova</span></span><span data-testid="content-text"> is set in an open world and I wanted to give the player tools to make moving around the world fast and exciting.Two such tools are a hoverboard and grapple hook. Echo Point Nova holds a 99% positive review score on Steam now, with the movement system receiving a lot of praise, so I hope this write up is of use to game devs and of interest to players!</span></p><h2 data-testid="content-text" id="How I work">How I work</h2><p data-testid="content-paragraph"><span data-testid="content-text">The first thing to know is I never really imagined the movement system in my head and then set out to build what I saw in my mind, the movement of EPN is the result of just experimenting and tinkering with code. I never really saw more than 1 or 2 steps ahead of me, it was very improvisational and based on what I thought would feel good as I playtested.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">But there is some logic that can be found, I think the kind of steps I took could be categorized in four ways:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Searching for Inspiration</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Player Physics</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Camera Motion</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>VFX and SFX</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">So I’d bounce between each of those in a loop for about 3 years, and the end result is </span><span data-testid="content-text"><span>Echo Point Nova</span></span><span data-testid="content-text">.</span></p><h2 data-testid="content-text" id="Searching for inspiration">Searching for inspiration</h2><p>Image via Greylock Studio.</p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Echo Point Nova</span></span><span data-testid="content-text"> wears its inspirations on its sleeve so I have no shame in sharing the games that inspired the mechanics. Often when I was stuck in getting a mechanic that didn't feel right, I’d play games to see how other devs solved it, or sometimes I would just be playing a game for fun and realize I really like how the devs solved something I had been puzzling over.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The hoverboard was born out of the sprint to crouch slide mechanic as seen in most modern shooters, in particular Call of Duty. I had built a similar mechanic into </span><span data-testid="content-text"><span>Echo Point Nova</span></span><span data-testid="content-text"> because it felt cool, and was really enjoying it as a way to traverse down slopes. I realized it would be nice if I could traverse this way even up slopes and got to thinking what would justify that. Well, what can slide wherever, whenever, for as long as you want? A hoverboard! Thus the board was born.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I’m not sure where the idea for grapple came from, I think it’s just a cool thing to have in games. A grapple was a major request for my last game </span><span data-testid="content-text"><span>Severed Steel</span></span><span data-testid="content-text"> but I could never figure out a way to add it without totally breaking the balance of the game, so starting a new game was an opportunity to implement a grapple.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I think the biggest influence on </span><span data-testid="content-text"><span>Echo Point Nova</span></span><span data-testid="content-text">’s grapple was from </span><span data-testid="content-text"><span>Halo Infinite</span></span><span data-testid="content-text">, I thought the way they handled steering it (just look in the direction you want to go) was great. I also liked the different ways they automatically ended a grapple to stop the player from getting stuck grappling when they don’t want to be.</span></p><h2 data-testid="content-text"><br>Player physics</h2><p>Image via Greylock Studio.</p><p data-testid="content-paragraph"><span data-testid="content-text">Hoverboarding is based on Unreal’s walking physics with friction and deceleration disabled. Also, typically a player hits their max walk speed quickly, but a hoverboard takes a few seconds of holding forward to hit top speed giving it a feeling of accelerating a vehicle. Probably the trickiest part was in getting the board to recognize and launch off slopes; by default the Unreal character motion really wants to stick to slopes so I had to write some slope detection code to figure out when the player should catch some air. Unreal also makes a lot of assumptions about how you want to handle Z velocity when falling off ledges or multi jumping, and thankfully I was able to override many to make things feel how I wanted.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The grapple runs on a tick checking that determines if the player is looking at anything they can grapple on; it also remembers if the player recently looked at something grapple-able and will let them grapple to it even if they aren't quite still looking at it. This keeps things flowy and lets the player be a little imprecise with the grapples while traveling at high speed. When the player grapples their velocity interpolates between their current velocity and the desired grapple velocity over about a second. Their desired grapple velocity is essentially where they are looking. If the player’s velocity is not in the direction of their grapple, or if they are close enough to their grapple point, or if they are looking away from their grapple, the grapple breaks.</span></p><h2 data-testid="content-text"><br>Camera motion</h2><p>Image via Greylock Studio.</p><p data-testid="content-paragraph"><span data-testid="content-text">I’ve found that camera motion is important to getting the feel of these motions right (along with options to turn off any camera flourish, for players who don’t enjoy it).</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For both grapple and hoverboard, FOV distortion I think really helps sell the sense of speed. The faster the player is moving, the wider their FOV is. I think someone who worked with me on </span><span data-testid="content-text"><span>Severed Steel</span></span><span data-testid="content-text"> suggested this idea and I quite like it.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For hoverboarding I do a couple things with the camera to sell the feeling of being on a board. I gently bob the camera up and down while in surf mode, to give the feeling of being on a floating object. When the player strafes on the board I tilt the camera like one might tilt their body to guide a snowboard, and I also tilt the camera to match the right or left slope when surfing perpendicular to a slope.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">A very important part of moving it is smoothing the movement when the character snaps between points. The way unreal handles stairs is to essentially teleport the character between each step which results in jarring camera teleporting by default. So, I’m always smoothing the camera so jumps like that aren't disruptive.</span></p><h2 data-testid="content-text" id="VFX and SFX">VFX and SFX</h2><p>Image via Greylock Studio.</p><p data-testid="content-paragraph"><span data-testid="content-text">These might not need explanation but I think they have to be mentioned for this article to be complete. The hoverboard has a pulsing electric engine sound effect which I pitch up based on the player's velocity. It also has particle FX attached to the board that kick up debris, the type of debris changes depending on the surface the player is on and the speed of the debris changes depending on player velocity.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For the grapple I thought it was important to have a snappy sound to confirm a successful grapple, along with a bright obvious beam to show what you grappled to.</span></p><h2 data-testid="content-text" id="Final takeaway">Final takeaway</h2><p data-testid="content-paragraph"><span data-testid="content-text">I’d like to highlight how any given game mechanic can’t really be viewed in isolation. So, for player physics, I can’t even imagine what it would have felt like in </span><span data-testid="content-text"><span>Echo Point Nova </span></span><span data-testid="content-text">without camera effects, sound FX, and VFX. We can expand that further and say that all this work on getting the feel of movement tuned wouldn't matter if the levels weren't interesting, and we can zoom out even further and say the movement system wouldn’t matter if it was unlocked in a weird part of the game or wasn’t tutorialized well. While we are zooming out, let's zoom out more to my workflow. I lead a small indie dev team where I’m the only programmer with engine access, so ultimately I can change what I want when I want. This allowed me to iterate as much as I wanted in whatever order I wanted to, which enabled my workflow where I could bounce between player physics, sound FX, VFX, and whatever else I wanted. I’m not sure how replicable such a flow would be for a larger team or a team with less centralization of decision making, but if such a method is compatible with your team then maybe give it a try.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I hope you enjoyed reading this! If you’d like me to go into further detail about anything feel free to write me at <a href="https://www.gamedeveloper.com/cdn-cgi/l/email-protection" data-cfemail="97faf6e3e3d7f0e5f2eefbf8f4fcf0f6faf2e4e4e3e2f3fef8b9f4f8fa">[email&nbsp;protected]</a>.</span></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>