<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Mon, 17 Mar 2025 09:39:38 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Photography Games | Game Developer Spotlight Series]]></title>
            <link>https://www.gamedeveloper.com/photography-spotlight</link>
            <guid>https://www.resetera.com/threads/photography-games-game-developer-spotlight-series.1136394/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/photography-spotlight<br/><br/><div id="readability-page-1" class="page"><div data-template="premier-page"><div data-module="content-spotlight"><article title="Photo Wk Intro" text-alignment="left" data-testid="content-spotlight-article"><div data-testid="content-spotlight-content-container"><p data-testid="content-spotlight-summary">The Past, Present, and Future</p><a href="https://www.gamedeveloper.com/design/welcome-to-photography-week-" data-discover="true"><h2 data-testid="content-spotlight-heading">Welcome to Photography Week!</h2></a><p data-testid="content-spotlight-body">Join us from 9/16-9/20 as we examine the photography genre and explore what developers can learn and apply to their own projects.</p></div></article></div><div data-module="text-box"><h2>What can developers learn from Photography Games?</h2><div data-module="content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>From 'Welcome to Photography Week' by Holly Green, Game Developer Community Editorial Coordinator</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Photography has become one of the most popular ways we interact with video games. Through the simple act of taking a photo, photography games and photo modes implore us to notice our surroundings, document our experience, and take a moment to commit to memory the images and emotions that we felt along the way.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To better explore those connections and mechanics, Game Developer is publishing a series of new articles digging into the topic, and highlighting some classics as well. Come along with us as we take a look at the history of photography in video games and its popular uses within the genre and preview the new interviews, essays, and deep dives publishing in the days to come.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We’ll be highlighting reader-submitted articles throughout the week and there’s tons of great stuff to look forward to, like an essay from Beasts of Maravilla Island developer Michelle Olson about eschewing photographic critique, an interview with the developers of Texas Chainsaw Massacre on why they went with the free release of an idyllic photography minigame as a prequel to their horror title, and a poignant feature from our senior editor Bryant Francis on what basic photography tips can teach us about making better photo modes.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We’ll also be revisiting interviews, blogs and features from Game Developer’s recent past, unearthing postmortems from games like </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/production/postmortem-sundae-month-s-pupperazzi">Pupperazzi</a></span><span data-testid="content-text"> and </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/production/postmortem-toem">TOEM</a></span><span data-testid="content-text"> as well as </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/design/how-some-indies-are-approaching-photography-mechanics-in-their-games">interviews with indie developers about how they’re using photography in video games</a></span><span data-testid="content-text">. Stay tuned for insight on how these games are put together and the features that developers find vital to the photography game experience.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">If this topic fascinates you, there’s still time to submit an article to our blog section about photography games and photo modes in video games.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Take a peek at our blog submission guidelines and FAQ, head over to our blog submission page and send us your thoughts.</span></p></div></div><div data-module="text-box"><h2>The Player Experience of Scoring (&amp; What is a "Good Photo" Anyway??)</h2><div data-module="content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>From 'The eye of the beholder: Measuring player success in photography games' by Michelle Olson</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">While scoring photos as a mechanic does provide extra feedback on the player’s actions, and can create ways for content to be gated or progression to be measured, it creates a very specific mindset when one is taking photos in the game.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To me, this type of photography feels more like client work, rather than artistic expression. Not only is there a prompt of what to take a picture of, but there are strict guidelines on how that subject should be photographed.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">While Pokemon Snap offers some variety by providing different opportunities to photograph the same subject in different environments, players aren’t able to have full freedom of composition.</span></p></div></div><div data-module="content-spotlight"><article title="Photo Wk - Blog Spotlight" text-alignment="left" data-testid="content-spotlight-article"><div data-testid="content-spotlight-content-container"><p data-testid="content-spotlight-summary">Featured Blog</p><a href="https://www.gamedeveloper.com/design/the-eye-of-the-beholder-measuring-player-success-in-photography-games" data-discover="true"><h2 data-testid="content-spotlight-heading">The eye of the beholder: Measuring player success in photography games</h2></a><p data-testid="content-spotlight-body">An exploration on how different photography games measure player progress, and how to balance progression metrics and artistic freedom.</p></div></article></div><div data-module="text-box"><p data-testid="content-paragraph"><span data-testid="content-text">In fact, there are often ways to achieve the “best” shot - a particular photo of a particular behavior that will always be worth more points than any other photo a player takes with the same subject. While these moments are often adorable and lovely, it creates an opportunity where one very specific composition is incentivized, and disincentivizes taking other interesting photos of the same subject.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This is a totally valid way of approaching this type of gameplay - to give a prompt, and ensure the player captures the prompt to the specifications of what the game wants to see. In essence, this “gamifies” the art of photography.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">But, I think it’s important to ask ourselves as designers of photography games - do I want this to feel like client work? Or do I want this to feel like artistic expression? Either is appropriate, so long as we are deeply intentional about it.</span></p></div><div data-module="content-spotlight"><article title="Photo Week - Manual Highlight 1" text-alignment="left" data-testid="content-spotlight-article"><div data-testid="content-spotlight-content-container"><p data-testid="content-spotlight-summary">Sweet Snaps &amp; Expressive Edits</p><a href="https://www.gamedeveloper.com/design/alekon-lets-players-make-the-picture-perfect-photo-album" data-discover="true"><h2 data-testid="content-spotlight-heading">Alekon lets players make the picture perfect photo album</h2></a><p data-testid="content-spotlight-body">This Pokémon Snap-inspired game uses robust photo editing tools to create an expressive space for players.</p></div></article></div><div data-module="content-spotlight"><article title="Photo Wk - Spotlight 2" text-alignment="left" data-testid="content-spotlight-article"><div data-testid="content-spotlight-content-container"><p data-testid="content-spotlight-summary">Dynamic Photos in a 2D World</p><a href="https://www.gamedeveloper.com/design/deep-dive-how-custom-tools-made-the-2d-photo-mode-of-a-highland-song-sing" data-discover="true"><h2 data-testid="content-spotlight-heading">Deep Dive: How custom tools made the 2D photo mode of A Highland Song sing</h2></a><p data-testid="content-spotlight-body">Photography isn't just for 3D games. Here's how inkle gave players a dynamic photo mode in a sidescrolling exploration game.</p></div></article></div><div data-module="content-spotlight"><article title="Photo Wk - Content Spotlight 3" text-alignment="left" data-testid="content-spotlight-article"><div data-testid="content-spotlight-content-container"><p data-testid="content-spotlight-summary">On-Rails Creativity</p><a href="https://www.gamedeveloper.com/design/inside-the-cute-and-creepy-world-of-penko-park" data-discover="true"><h2 data-testid="content-spotlight-heading">Inside the cute and creepy world of Penko Park</h2></a><p data-testid="content-spotlight-body">The developers tell us how they curated an expressive set of creatures to photograph and why they chose on-rails over an open-world experience.</p></div></article></div><div data-module="text-box"><h2>Can you help players figure out what needs to be in the frame?</h2><div data-module="content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>From 'What basic photography tips can teach us about making better photo modes' by Bryant Francis</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Before I worked in games, I was in TV and film production. Before I was in TV and Film production, I was in film school. Before I ever shot a moving picture, I took a photography course, and before I took that photography course, my Grandfather, Larry S. Cohan, taught me how to shoot photos.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In Fall 2009 he was published a (still-archived) story called "Better Photos—No Cost" in a Maryland magazine called Outlook by the Bay, a publication for senior citizens of the Chesapeake Bay region. It documents the basics of photography he didn't just share with me but seemed obsessed with everyone having some understanding of.</span></p></div></div><div data-module="content-spotlight"><article title="Photo Wk - Blog Spotlight 2" text-alignment="left" data-testid="content-spotlight-article"><div data-testid="content-spotlight-content-container"><p data-testid="content-spotlight-summary">From the Editors: Bryant Francis</p><a href="https://www.gamedeveloper.com/art/how-to-help-players-shoot-better-in-game-photos-for-no-cost" data-discover="true"><h2 data-testid="content-spotlight-heading">What basic photography tips can teach us about making better photo modes</h2></a><p data-testid="content-spotlight-body">Advice for 'mature Marylanders' can be good for players too.</p></div></article></div><div data-module="text-box"><p data-testid="content-paragraph"><span data-testid="content-text">Some of his grumpiness still drips off the page. "Don't bore your friends with photos that would bore you if they weren't your own," he wrote. "If you're shooting the sunrise over Bar Harbor, Maine, don't try to include your half-asleep spouse." Sarcasm was a second language for Grandpa, but I remember he seemed sincerely frustrated at how his peers didn't understand the basics of photography, equaled only by his frustration of how they were intimidated by computers.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For Photography Week, I revisited his guide and thought about how he was trying to teach fellow retirees better ways to take shots. They're good tips—ones I still think about when having fun in a photo mode like the ones in Pacific Drive, Star Wars Jedi: Survivor, or Marvel's Spider-Man 2.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">They're so good, in fact, that they could help you make a better photo mode for your next game.</span></p></div><div data-module="content-cards"><p data-testid="content-cards-header"><h3 data-testid="contentCardsTitle">From the Archives: Photography Game Classics</h3></p></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Road to the IGF 2024 with Joel Couture: Game Developer Podcast ep. 41]]></title>
            <link>https://www.gamedeveloper.com/design/road-to-the-igf-2024-with-joel-couture-game-developer-podcast-ep-41</link>
            <guid>https://www.resetera.com/threads/road-to-the-igf-2024-with-joel-couture-game-developer-podcast-ep-41.1136385/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/road-to-the-igf-2024-with-joel-couture-game-developer-podcast-ep-41<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">With GDC 2024 and the Independent Games Festival less than a week away, editor in chief Danielle Riendeau sits down with veteran indie beat journalist Joel Couture for episode 41 of the Game Developer Podcast. Each year, Joel painstakingly assembles our </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/keyword/road-to-the-igf">Road to the IGF series, which showcases the methods and philosophies of various IGF finalists through a series of in-depth interviews.</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Music by Mike Meehan. Produced by Jordan Mallory.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">In addition to the games that really stuck out this year – including (but not limited to) </span><span data-testid="content-text"><span>Kevin(1997-2077)</span></span><span data-testid="content-text">, </span><span data-testid="content-text"><span>goodbye.monster</span></span><span data-testid="content-text">, </span><span data-testid="content-text"><span>Isles of Sea and Sky</span></span><span data-testid="content-text">, </span><span data-testid="content-text"><span>Anthology of the Killer</span></span><span data-testid="content-text">, </span><span data-testid="content-text"><span>Planetka</span></span><span data-testid="content-text"> and others—Joel also talks about his preparation process for producing a truly herculean amount of interviews in such a short amount of time.</span></p><h2 data-testid="content-text" id="Creating Tchia">Creating Tchia</h2><p data-testid="content-paragraph"><span data-testid="content-text">“They're all nominated for a very good reason, and once I figure that reason out stuff kind of starts to unravel,” Joel tells Danielle. “</span><span data-testid="content-text"><span>Tchia</span></span><span data-testid="content-text">… which takes place in New Caledonia, the devs really wanted to explore their homeland and show it off and show their culture off. The lead devs were from there, but the rest of the team wasn't, so what was it like to show off your home? What was it also like to introduce a team to your home and get them to embrace that culture and work with that culture?”</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Elsewhere, Joel speaks to the responsibility he feels to conduct his interviews in an ethical manner, but also cautions developers to remember that they are ultimately in control of their own story.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">“We can do a lot of damage to a life with some of the stuff we put out there,” he says. “Not everybody’s concerned about ‘do no harm’ and not everybody does harm on purpose. So just just take care with your story and if you want it out there, as best you can, because you're the best person to protect it.”</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Editor-in-Chief, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Danielle is the editor-in-chief of Game Developer, with previous editorial posts at Fanbyte, VICE, and Polygon. She’s also a lecturer in game design at the Berklee College of Music, and a hobbyist game developer in her spare time.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Accessibility and fancy footwork with GLYDR's John Warren - Game Developer Podcast ep. 40]]></title>
            <link>https://www.gamedeveloper.com/marketing/accessibility-and-fancy-footwork-with-glydr-s-john-warren</link>
            <guid>https://www.resetera.com/threads/accessibility-and-fancy-footwork-with-glydrs-john-warren-game-developer-podcast-ep-40.1136379/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/marketing/accessibility-and-fancy-footwork-with-glydr-s-john-warren<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">On the latest episode of the Game Developer podcast, I had the pleasure of welcoming my former colleague John Warren on the show to talk about his work at </span><span data-testid="content-text"><a target="_blank" href="https://www.glydr.gg/">GLYDR</a></span><span data-testid="content-text">. Now finishing up a successful Kickstarter run, GLYDR is a control apparatus that people operate with their feet, leaving their hands free for other tasks (or providing options for folks who need hands-free solutions).</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Music by Mike Meehan. Produced by Jordan Mallory.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Listen now on </span></span><span data-testid="content-text"><a target="_blank" href="https://podcasts.apple.com/us/podcast/40-accessibility-and-fancy-footwork-with-glydrs/id1476405424?i=1000646222139">Apple Podcasts</a></span><span data-testid="content-text"><span>, </span></span><span data-testid="content-text"><a target="_blank" href="https://podcasts.google.com/feed/aHR0cHM6Ly9jYXN0LnJvY2tzL2hvc3RpbmcvMTk1OTMvZmVlZHMvQ1M5WlkueG1s/episode/SlVNOFlIQ0EtVTY4MEs5?sa=X&amp;ved=0CAUQkfYCahcKEwiIwMPSw86EAxUAAAAAHQAAAAAQCg">Google Podcasts</a></span><span data-testid="content-text"><span>, and </span></span><span data-testid="content-text"><a target="_blank" href="https://open.spotify.com/episode/5CH4f16WWQF5ChvCQoefAu">Spotify.</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">We talked about everything from the accessibility piece to the wide range of use cases for the controller, as well as filming a good trailer for your new device (including some light stuntwork by John's partner), finding the way to success with Kickstarter, and how to market a new controller to all types of players.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We also chatted about the power of having something positive happen during the ongoing layoffs and turmoil in the industry.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"Everyone's spirit is, you know, kind of in a weird place right now," said Warren.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"And I think having those things to hold on to that are hopeful is definitely important. And also like, keep in mind, the person that really facilitated the creation of this device and kind of getting into this market has absolutely no games experience."</span></p><p data-component="related-article"><span data-testid="related-article-title">Related:</span><a href="https://www.gamedeveloper.com/production/making-sense-of-the-2024-state-of-the-game-industry-report" target="_self" data-discover="true">Exploring the 2024 State of the Game Industry report - Game Developer Podcast ep. 39</a></p><p data-testid="content-paragraph"><span data-testid="content-text">"I mean, this is, this is a this is a 70 plus year old man with a engineering background that came up with this idea, because he just likes innovation and new stuff and thinking about 'why why haven't we done this?' You know, asking 'why not?' And so, innovation and excitement and new things in this games industry doesn't also have to come from the same people."</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Editor-in-Chief, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Danielle is the editor-in-chief of Game Developer, with previous editorial posts at Fanbyte, VICE, and Polygon. She’s also a lecturer in game design at the Berklee College of Music, and a hobbyist game developer in her spare time.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Phantom inspiration and the ethical auteur with Xalavier Nelson Jr.]]></title>
            <link>https://www.gamedeveloper.com/design/phantom-inspiration-and-the-ethical-auteur-with-xalavier-nelson-jr-</link>
            <guid>https://www.resetera.com/threads/phantom-inspiration-and-the-ethical-auteur-with-xalavier-nelson-jr.1136373/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/phantom-inspiration-and-the-ethical-auteur-with-xalavier-nelson-jr-<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">On the latest episode of the Game Developer podcast, we had a far-ranging chat with Strange Scaffold creative director Xalavier Nelson Jr. Nelson's outfit just </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/design/making-and-breaking-the-max-payne-like-rules-of-i-el-paso-elsewhere-i-">put out its largest game, El Paso, Elsewhere</a></span><span data-testid="content-text"><span>,</span></span><span data-testid="content-text"> earlier in the fall, to significant critical acclaim. We talked a great deal about the game and its many inspirations.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Nelson gave honest assessment of the game's production cycle and the team's work practices. We also discussed broader problems in game production throughout the industry, including career longevity and the simple fact that folks in creative fields need to be able to pass on information and learnings to newer ones.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Music by Mike Meehan. Produced by Jordan Mallory.</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Listen now on </span><span data-testid="content-text"><a target="_blank" href="https://podcasts.apple.com/us/podcast/game-developer-podcast/id1476405424">Apple Podcasts</a></span><span data-testid="content-text">, </span><span data-testid="content-text"><a target="_blank" href="https://podcasts.google.com/feed/aHR0cHM6Ly9jYXN0LnJvY2tzL2hvc3RpbmcvMTk1OTMvZmVlZHMvQ1M5WlkueG1s/episode/MkdKV0tETDEtN09LVFZTNA?sa=X&amp;ved=0CAUQkfYCahcKEwjoh429pvuCAxUAAAAAHQAAAAAQAQ">Google Podcasts</a></span><span data-testid="content-text">, and </span><span data-testid="content-text"><a target="_blank" href="https://open.spotify.com/show/3IjaJ0YoZiVvgOK5xRlDQx">Spotify.</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">"We don't give people enough experiences, frankly." Nelson says, when discussing developers' longevity and quality of experiences in the game industry. "Compared to any [film] director, and the amount of work they do in their first ten years, both speculative stuff as well as stuff that actually comes out, vs. what a single creative director in games tends to get to do, in the span of ten years, then you see, pretty quickly... it's immediately obvious why we don't have clearer voices producing more consistently and producing in a way that actively gathers people to care about those voices as well."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Nelson works across media on top of his Strange Scaffold duties, a writer for games and comics, as well as his latest endeavor: acting, which he shows off as the voice of </span><span data-testid="content-text"><span>El Paso, Elsewhere</span></span><span data-testid="content-text">'s protagonist.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">You can listen to the full episode embedded above for the full chat, including Nelson's advice for aspiring indie developers and leaders.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Editor-in-Chief, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Danielle is the editor-in-chief of Game Developer, with previous editorial posts at Fanbyte, VICE, and Polygon. She’s also a lecturer in game design at the Berklee College of Music, and a hobbyist game developer in her spare time.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Bethesda relaunches paid mod store for Skyrim: Special Edition]]></title>
            <link>https://www.gamedeveloper.com/business/bethesda-relaunches-paid-mod-store-for-skyrim-special-edition</link>
            <guid>https://www.resetera.com/threads/bethesda-relaunches-paid-mod-store-for-skyrim-special-edition.1136358/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/bethesda-relaunches-paid-mod-store-for-skyrim-special-edition<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">A new update for the remastered edition of&nbsp;</span><span data-testid="content-text"><span>The Elder Scrolls V:&nbsp;Skyrim </span></span><span data-testid="content-text">has come with a new storefront for paid mods for the game. Known as&nbsp;</span><span data-testid="content-text"><a target="_blank" href="https://bethesda.net/en/article/52xMsb1fD2nTiNBkiWCbxq/build-share-and-find-creations-skyrim-special-edition">Bethesda Game Studios Creations</a></span><span data-testid="content-text">, the platform has been dubbed&nbsp;"an enhanced platform for building and sharing community-made content."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Back in 2015,&nbsp;</span><span data-testid="content-text"><span>Skyrim&nbsp;</span></span><span data-testid="content-text">was one of the first games to </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/game-mods-can-now-be-sold-on-the-steam-workshop-for-real-money">allow mod creators</a></span><span data-testid="content-text"> to charge real money for game mods on the Steam Workshop. Those mods were&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/valve-changes-its-mind-removes-all-paid-i-skyrim-i-mods-from-steam">later pulled</a></span><span data-testid="content-text">&nbsp;after intense criticism, though Bethesda tried again with the </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/the-pros-and-cons-of-bethesda-s-creation-club">Creation Club</a></span><span data-testid="content-text"> in 2017 for&nbsp;</span><span data-testid="content-text"><span>Fallout 4&nbsp;</span></span><span data-testid="content-text">and later&nbsp;</span><span data-testid="content-text"><span>Skyrim:&nbsp;Enhanced Edition</span></span><span data-testid="content-text">,&nbsp;albeit with some reservations.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The BGSC builds upon the Creation Club, making it so&nbsp;Creators can apply to be a part of the Verified Program. Upon acceptance, they'll have the ability to charge for their creations and receive royalties.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Further, verified creators have fewer restrictions on releasing mods. They won't have to require a patch to release or be restricted on including voice-over; however, they can't be localized in multiple languages and must follow platform restrictions for content and storage.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Not long after&nbsp;</span><span data-testid="content-text"><span>Starfield's&nbsp;</span></span><span data-testid="content-text">release, Bethesda confirmed </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-starfield-i-will-enlist-for-official-mod-support-in-early-2024">mod support</a></span><span data-testid="content-text"> for the game would launch early next year. More than its previous works, it was apparent with this particular game the extent to which&nbsp;</span><span data-testid="content-text"><a target="_blank" href="https://www.polygon.com/23861284/starfield-mod-community-patch-nexus-mods">mods</a></span><span data-testid="content-text">&nbsp;are used to address&nbsp;issues or bugs that Bethesda was unable to fix prior to release.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Clearly, the developer has mods on the brain, but it's unclear when (or if) it'll allow for paid mods in its newest RPG.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Bethesda's FAQ on becoming a Verified Creator can be read </span><span data-testid="content-text"><a target="_blank" href="https://creations.bethesda.net/en/creators/bethesdagamestudios">here</a></span><span data-testid="content-text">.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tinybuild is cutting jobs after an "incredibly challenging year"]]></title>
            <link>https://www.gamedeveloper.com/business/tinybuild-is-cutting-jobs-after-an-incredibly-challenging-year-</link>
            <guid>https://www.resetera.com/threads/tinybuild-is-cutting-jobs-after-an-incredibly-challenging-year.1136352/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/tinybuild-is-cutting-jobs-after-an-incredibly-challenging-year-<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Hello Neighbor publisher Tinybuild is accelerating a cost reduction plan that will result in an unknown number of layoffs.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The company </span><span data-testid="content-text"><a target="_blank" href="https://polaris.brighterir.com/public/tinybuild/news/rns/story/w0jqjnx">broke the news in a trading update</a></span><span data-testid="content-text"> and explained it has been performing "below expectations" and must therefore take "accelerated cost action to re-align investments with expected revenues."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Tinybuild added that "unusually weak trading in October" and a subpar performance in Q4 means full-year revenues will likely stumble, ranging between $40 million to $50 million. It also noted that its Versus Evil subsidiary continues to underperform and has delayed three of four upcoming titles until 2024.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"Since the publication of the Company's interim results in September 2023, the market has deteriorated further and negotiations of certain large contracts have extended into the final month of the year," reads the trading update.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"These remain under negotiation and may not be signed by year end, or at all. The continued underperformance of Versus Evil which delayed into 2024 three out of four games originally planned for release in H2 2023, including the widely anticipated </span><span data-testid="content-text"><span>Broken Roads</span></span><span data-testid="content-text">, also weighed on group performance."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">As of November 2023, Tinybuild had around $5.7 million in cash but expects that stockpile to "decline further due to limited cash inflow from October sales, one-off charges as part of the cost reduction plan and underlying software development investments due in December."</span></p><h2 data-testid="content-text" id="Tinybuild's &quot;incredibly challenging year&quot;">Tinybuild's "incredibly challenging year"</h2><p data-testid="content-paragraph"><span data-testid="content-text">Tinybuild CEO Alex Nichiporchik explained a combination of those factors has turned 2023 into an "incredibly challenging year" for the publisher, and conceded the company ultimately failed to overcome some significant hurdles.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"The whole team at Tinybuild worked tirelessly to release our best products, despite the impact of the war in Ukraine that deeply affected most of us. We couldn't overcome weak demand for video games and the sudden reversal of market dynamics that had favored us over the previous years. We innovated in marketing, refocused our catalogue, and adjusted the cost base as quickly as possible, and, despite these actions, it wasn't enough in such a rapidly evolving market," he said.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Confirming the layoffs, Nichiporchik said it's "physically painful to part ways with colleagues" who have worked tirelessly for Tinybuild, but indicated the cuts are essential if the company hopes to bounce back during a "pivotal stage."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"I am committed to do everything I can to ensure we get through this tough period. We owe it to all our stakeholders now to bounce back and deliver on what Tinybuild can achieve," he added.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Looking ahead, Tinybuild said the outlook for the next fiscal year remains "cautious" due to the likelihood of "continued pressure on discounting in a crowded market for new releases."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"The planned launch of certain promising games in 2024 gives reason for optimism and this coupled with a leaner cost base could translate into strong operating leverage in the event of a recovery in video games sales," concludes the update.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">News Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Game Developer news editor Chris Kerr is an award-winning journalist and reporter with over a decade of experience in the game industry. His byline has appeared in notable print and digital publications including Edge, Stuff, Wireframe, International Business Times, and&nbsp;</span><span data-testid="content-text"><a target="_blank" href="http://pocketgamer.biz/">PocketGamer.biz</a></span><span data-testid="content-text">. Throughout his career, Chris has covered major industry events including GDC, PAX Australia, Gamescom, Paris Games Week, and Develop Brighton. He has featured on the judging panel at The Develop Star Awards on multiple occasions and appeared on BBC Radio 5 Live to discuss breaking news.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Art to Programming Conversation]]></title>
            <link>https://www.gamedeveloper.com/design/the-art-to-programming-conversation</link>
            <guid>https://www.resetera.com/threads/the-art-to-programming-conversation.1136346/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/the-art-to-programming-conversation<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">The first component is the words themselves, and how you decide to have them stored. For the purposes of the game </span><span data-testid="content-text"><span>Rockin’ Racket</span></span><span data-testid="content-text">, on which I am a Programmer and part-time Artist, we used Ink. Ink is a narrative scripting language developed by Inkle Studios. I am in no way an expert on it so if you would like to learn more I suggest reading about it </span><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.inklestudios.com/ink/">here</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">However, the general idea of an Ink file is to structure a text file into a conversation, with each line of text being a line of dialogue, but with the added bonus of having specific use cases for multiple different options for the next line, sections of conversations, and a variable system. Ink files also allow for dependencies, meaning developers can have an Ink file which uses variables from another through the “INCLUDE” keyword. The core of my work was in regards to programmatically reading Ink files within scripts for Unity, which is streamlined through the </span><span data-testid="content-text"><span>ink-Unity Integration</span></span><span data-testid="content-text"> package developed by the same company.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The package compiles Ink files into readable JSON files that, inside scripts, can be converted into Story objects. These Story objects store the current line, variables, and an incredibly handy, line specific type of variable called a tag which is indicated as “#tagName: tagValue”. Each tag is a part of an attribute of the Story that updates for each line. Now that you are more aware of Ink files and their capabilities, I can discuss the dialogue system which I developed for </span><span data-testid="content-text"><span>Rockin Racket</span></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The dialogue system I developed was meant to be a fully independent piece that could be put into a scene, and work with no issue. To achieve this, I have a system of triggers and a manager, wherein the triggers have an attached ink file that, upon being triggered, sends its ink file to the manager object. The manager object deals with both the graphical display of the dialogue, and the programming backend. In order for players to see the dialogue, the UI consists of a main dialogue panel, where in the top left corner is a nametag, the middle of the panel is where lines of dialogue appear, the bottom is where dialogue choice buttons appear, and the center of the right-side is the continue dialogue button. Behind the main panel are two character sprites, a smaller sprite on the left indicates the player character, and a larger sprite across the whole right-side of the screen is the character being spoken to.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To achieve a reactive and dynamic system we used a mixture of ink tags to update the nametag, update the emotions of the speaker, and the layout of the dialogue window. In order to use the ink tags in Unity, you must first process them from the Story object. Luckily, each tag is actually just a string of characters after a # symbol in Ink, and all tags present in a line can be retrieved through the currentTags attribute of the Story object as a list of strings. However, this structure does mean that you must first process tag values, by splitting them, before using them. To split a tag, you can just use the built in “split” String function in Unity, and store the split strings in a length 2 array. The first element at index 0 will be the key for the tag, and the second element at index 1 will be the value. Then, you can set up differing behaviors for different tag keys. After implementing tag processing, I worked with the narrative writer to ensure three tags were present, speaker, portrait, and layout.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The layout tag is obviously used to update the layout which is a simple call to a Unity Animator. Animators in Unity can be used for far more than just importing frame-by-frame animations, but one easy use they can have is to save certain sets of object positions, which is perfect for saving layouts. The other tags are more interesting.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The speaker tag is the name of the character speaking which, depending on the character, updates the nametag to the value given in the tag, and updates the background color of the name tag to match the character speaking, since each main character in </span><span data-testid="content-text"><span>Rockin’ Racket</span></span><span data-testid="content-text"> has a signature color that defines their palette.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The portrait tag is the most complex, but is still relatively straightforward. For starts, each line that changes the portrait tag has to have 2 of them, one for the player character sprite, and one for the other character sprite. However, since each tag is a string, unlike normal variables in programming languages, two different portrait tags will be processed. To determine which sprite Animator to use, the first word of the string is checked to see if it is “harvey”, the name of the player character. If it is, then the animator used is the one that updates the player character sprite, but if it is not, then the animator used is the non-player character sprite. Each animator has a list of recorded animations, and the tag values of tags with key “portrait” are names of the animations, and the manager tells the animator to play the tag value, essentially allowing Ink to tell Unity what to animate next.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The&nbsp; easiest piece is retrieving the next line of dialogue, which is a simple call of the “nextLine” method on the Story object. The return value is a string with that line of dialogue which you can simply update a TextMesh object to display the retrieved value. However, calling it also moves the Story along, meaning you need to handle tags whenever calling this method.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To allow for player input, Story objects also have a currentChoices attribute, wherein you can determine if choices are available at a given line, and how many. By calling this method whenever progressing, you can check whether the line is a simple dialogue continuation, or if you need to show choice options. Implementing choice options is also quite simple, as each choice is set to an index corresponding to their position in the currentChoices list. Then, by setting each choice as its index, you can determine what choice the player makes and call the “chooseChoiceIndex” method on your Story object, using the index of the player choice as input. After it's a simple call of “nextLine” to progress the story to the right dialogue tree! Altogether, this system helps create an adaptable workflow, and opportunities for interesting UI elements!</span></p><p data-testid="content-paragraph"><span data-testid="content-text">If you would like to follow the development progress of </span><span data-testid="content-text"><span>Rockin Racket</span></span><span data-testid="content-text">, you can find the project’s socials below!</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.instagram.com/rockinracket/">Instagram</a></span><span data-testid="content-text">, </span><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://twitter.com/rockinracket">Twitter (X)</a></span><span data-testid="content-text">, </span><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.youtube.com/@RockinRacket">Youtube</a></span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Curves in Games: The Art of Bezier Curves]]></title>
            <link>https://www.gamedeveloper.com/programming/curves-in-games-the-art-of-bezier-curves</link>
            <guid>https://www.resetera.com/threads/curves-in-games-the-art-of-bezier-curves.1136337/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/curves-in-games-the-art-of-bezier-curves<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Pexels user Monstera Production.</span></p></div><div data-module="content" data-testid="article-base-body-content"><h2 data-testid="content-text" id="What is a Bezier curve?">What is a Bezier curve?</h2><p data-testid="content-paragraph"><span data-testid="content-text">Bezier curves are one of the most important concepts in computer graphics, known for their flexibility and precision in representing curves. The foundation of the mathematical principles of Bezier curves are the Bernstein polynomials which were established in 1912. There are countless usages of Bezier curves in the field of computer science, from animating smooth transitions for user interfaces and rendering dynamic fonts, to creating modeling tools.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In basic terms, Bezier curves are defined with a variable number of control points. With just two control points, it forms a straight line, also known as a linear Bezier curve. However, things get more interesting when there are more than two control points. A Bezier curve with three control points is a quadratic Bezier curve, while one with four points is a cubic Bezier curve, and so forth. Quadratic and cubic Bezier curves are particularly popular in tween animations because of their balance between computational simplicity and the capacity to represent an unlimited range of curves.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The parametric equation of a Bezier curve can be written as:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">where:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">B(t) is the point on the Bezier curve at the parameter t.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">n is the degree of the Bezier curve.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">P_i are the control points.</span></p><h2 data-testid="content-text" id="Implementation">Implementation</h2><p data-testid="content-paragraph"><span data-testid="content-text">In this section, we will explore the practical implementation of a Bezier curve using JavaScript. Starting with the binomial coefficient function. We can use a recursive approach due to its simplicity. However, recursion may not be the most efficient for large values due to the potential of stack overflow and excessive function calls. For those cases, an iterative solution would be more suitable. In the case of Bezier curves, the most commonly used variants are the quadratic and cubic ones, so a recursive implementation is enough:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Moving on to the core of our implementation which is the Bezier curve equation itself. To encapsulate our logic, we can create a class called ‘BezierCurve’ that has an array of control points. It also provides a method named ‘getPoint’ that returns a point on the curve with the t parameter as the input. The implementation is shown below:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">With the ‘BezierCurve’ class in place, we now have a basic implementation of a parametric Bezier curve. In order to make things more interesting, below is a simple rendering of our ‘BezierCurve’ class in action:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The graph showcases a cubic Bezier curve, with its shape influenced by the four control points marked in red. In the next section, we will uncover some practical applications of the Bezier curves.</span></p><h2 data-testid="content-text" id="Use Bezier curves for animations">Use Bezier curves for animations</h2><p data-testid="content-paragraph"><span data-testid="content-text">Bezier curves are commonly used in animation engines, offering a way to provide smooth transitions. For example, in web development, CSS provides native support for custom easing functions using Bezier curves. The same goes for software and game development, where UI design requires flexibility and modularity. As an example, a menu pop-up animation might need to start quickly and decelerate towards the end. Implementing such non-linear dynamic animation directly through code can be complex, and might have less control over variables in the animation.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">With Bezier curves, this process can be simplified by defining a curve with four points, starting at (0, 0) and ending at (1, 1) to clamp the animation within a normalized range, and adding two control points to create the desired smooth effects. For the pop-up effect, the two middle control points can be at (0.25, 1) and (0.5, 1) respectively to generate a Bezier curve commonly known as “ease out quad” in CSS and tween engines.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To illustrate this, we will provide an example of how we can apply Bezier curves to a simple linear animation. Consider the following basic JavaScript code snippet that changes the transparency of a circle linearly:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The result animation looks like this:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To enrich this animation with a smoother transition, we can incorporate our ‘BezierCurve’ class by defining an “ease out quad” curve with control points of (0, 0), (0.25, 1), (0.5, 1) and (1, 1). Then replacing the linear alpha transition with the result of the ‘getPoint’ method, we can achieve a more refined animation:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The modification yields an animation that starts quickly and slows down gently.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Besides the common “ease out quad” ease type, there are numerous predefined ease types that can add more characteristics to animations. We can also easily create our own ease types with the help of websites such as https://easings.net/.</span></p><h2 data-testid="content-text" id="Use Bezier curves for movement">Use Bezier curves for movement</h2><p data-testid="content-paragraph"><span data-testid="content-text">Apart from providing smooth animations for applications and games, Bezier curves can also be used to define a curved path for objects in games to move along. Consider a 2D shooter game where some enemies move in different paths. While straightforward paths like a straight line or even a circle can be hard-coded, this approach lacks flexibility and makes adjusting and visualizing the path challenging.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For this case, we can also use Bezier curves to both visualize and design complex paths with ease. Here’s an example of an object moving along a visualized curved path defined by a set of Bezier curve control points:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Here’s a basic idea of how it works: the Bezier curve provides a set of positions based on the t parameter which represents time. By updating the object’s position to correspond with these points, it’s able to traverse through the path smoothly.</span></p><h2 data-testid="content-text" id="Conclusion">Conclusion</h2><p data-testid="content-paragraph"><span data-testid="content-text">That’s all for this post. There are still many other applications of Bezier curves. In conclusion, the flexibility and modularity of Bezier curves make it a powerful tool for developers. It simplifies complex curve equations into easier representations with control points.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">References</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#:~:text=A%20B%C3%A9zier%20curve%20(%2F%CB%88b,by%20means%20of%20a%20formula.">https://en.wikipedia.org/wiki/B%C3%A9zier_curve#:~:text=A%20B%C3%A9zier%20curve%20(%2F%CB%88b,by%20means%20of%20a%20formula.</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">https://easings.net/</span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Some Factors to Managing a Team]]></title>
            <link>https://www.gamedeveloper.com/programming/some-factors-to-managing-a-team</link>
            <guid>https://www.resetera.com/threads/some-factors-to-managing-a-team.1136331/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/some-factors-to-managing-a-team<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Pexels user Helena Lopes.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Introduction</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">As the capstone for the Game Development Specialization for Computer Science majors at Indiana University, I have been working as a Systems Programmer and a Project Manager at Crystalline Games LLC. The company was formed as part of the program, and the capstone/goal of the develop a game from concept to release by the time you graduate. Every team needs proper communication and cooperation, whether it is a massive AAA studio or a small studio of college students who aren’t even getting paid to make the game. As my time with the team lengthened, I took on more managerial responsibilities in alignment with my skills. In this post, I will review some key experiences I learned during this time. As of now, December 2023, the project is still ongoing, so I may come to learn even better ways to help the teams I am part of work together and become efficient.</span></p><h2 data-testid="content-text" id="Balancing Management and Programming Work">Balancing Management and Programming Work</h2><p data-testid="content-paragraph"><span data-testid="content-text">As part of a small team, my role consists of both programming and team management. I work alongside the producer/lead programmer to help delegate programming tasks each week. I also am responsible for the majority of code branch reviews. As a student, there is limited time each week to work on the game, so balancing the management and programming tasks I have each week is vital. Communication plays a key role in this balance. Since I am not the only person who can perform these tasks, I work with the lead programmer each week to get help when needed for them. This is the first buffer to issues with time management for completing tasks for both my roles. If that is not an option for a particular week, the next choice is to prioritize development over review and management tasks. Our game is yet to arrive at an MVP (Minimum Viable Product) status, so we prioritize developing the minimum level of content first. There will be other weeks with extra time available for either me or the lead programmer to complete the management and review work. Depending on the state of your game and the size of your team, you may need, or not need at all, different ways to balance multiple roles and tasks for each week.</span></p><h2 data-testid="content-text" id="Learning What to Expect From Co-Workers">Learning What to Expect From Co-Workers</h2><p data-testid="content-paragraph"><span data-testid="content-text">Especially on an unpaid project with college students, everyone will have a different level of dedication and time available for the project. With this in mind, it is important to keep track of the types of tasks each member struggles with and excels with, and how often people are over/under estimating the work they can complete each sprint. The better aware you are of who is good at what, the easier it will be to delegate tasks without issues. It is also good to keep in mind what parts of the code and systems the person knows well or has been continually working on. The fresher the details of the code, the easier it is to work with.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">&nbsp;Another important thing to be aware from co-workers is the level of communication they provide. Some people need to be directly and explicitly told how and what they need to communicate, or they will not communicate at all. Some people will communicate all their work enthusiastically. Communication is a key component to all team work and even small updates on the timeline of workflow can help with project management. The sooner you can be aware of issues, the sooner they can be resolved or worked around.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">&nbsp;Learning what to expect from your co-workers will help team management run smoothly, and will help prevent issues before they ever happen, especially in small team environments where there is less room for error or overlapping work.</span></p><h2 data-testid="content-text" id="Ask For Help!">Ask For Help!</h2><p data-testid="content-paragraph"><span data-testid="content-text">This is pretty straightforward, don’t be afraid to ask for help from your co-workers! Ask for help as early as you think you may need it. Asking for help is beneficial in two ways, it communicates a potential problem to managerial roles, and it can also get the potential problem solved quicker than it would with asking. It’s quite common to hear “nobody can do everything on their own” and that’s true. That is why we are on a team in the first place. A new mindset helping brainstorm ideas is one of the best ways to problem solve. If team members aren’t available, there are forums like Stack Exchange, or even game developer discord channels where you can ask for help. Many times, whoever you ask will be willing to help, because you are a team or a member of the community, so it never hurts to ask for help. It will make everything run smoother.</span></p><h2 data-testid="content-text" id="Conclusion">Conclusion</h2><p data-testid="content-paragraph"><span data-testid="content-text">The operation of an efficient game development team is extraordinarily difficult to balance. These are a few key factors I have found influence the operations the most. As long as someone on the team can be in charge of managing these communication and coordination worries, the team can operate smoothly.</span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Turning Bugs Into Features]]></title>
            <link>https://www.gamedeveloper.com/programming/turning-bugs-into-features</link>
            <guid>https://www.resetera.com/threads/turning-bugs-into-features.1136325/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/turning-bugs-into-features<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Pexels user Brett Stone.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">This post will review how I took a bug that I needed to fix and turned it into a standout feature for our game.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This August marked my first time working on a game development team built up of more than just programmers, with a goal to create more than just a tech demo. With that in mind, we came into the project part-way through, initially tasked with cleaning up the code work done by designers, rather than programmers. During that cleanup, I found a bug that was funny enough to share with other team members, to the point where some of them asked if I was able to make that a feature instead. To be brief, the player character is able to possess objects in the game in order to mess with surrounding victims. The bug occurred when the player would sometimes leave the objects, and the objects would launch themselves in a random direction.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">First, design work was required. How was this issue going to be turned into a player action? The basic idea was an object that the player could possess and launch at the victims, as a projectile rather than a new mode of transport. Because we want this object to fit neatly into a system of other objects like it, it’s important to work as much within the system as possible. For instance, each possessable inherits from a parent possessable class, with it’s own serialized requirements. Below is what that looks like in the inspector.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Once we have the basic idea and this system requirements, we can actually begin creating this object. The MovementSystem type determines what happens when the player uses WASD to control the object. For this object, since the goal is to launch it, it didn’t make much sense for it to move on its own, so it has its own aiming movement type. This just rotates the object with A and D. Next was a way for the player to see where they’re aiming, which as a placeholder worked as a simple geometric shape in the direction the player faces. This early model looked something like this.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The launching is next. Objects can have an ability, like pulling victims toward them, that the player can activate. In this case, that would be the launching. The code here is relatively simple to start, merely to apply force in the direction the player faces.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The more difficult part is actually triggering an interaction with the victims. The system at the time would activate a trigger sphere around the object to scare victims in the vicinity. Initially, I attempted a design where the player would exit the object as they launched it, to seem more like it was thrown. But because of system limitations, the zone to trigger wouldn’t be accessible if the player were not possessing that object. So instead of reworking the framework of the entire project, I thought to try changing the design instead. This came in the form of a trigger zone that worked on a timer, and during that time would affect any victim in it’s radius. This became known as a LastingEmotionZone, and is still used elsewhere in the project.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This implementation worked decently, but two problems came about. The first was that other branches were moving along, and new changes to the system meant new ones were needed in my design as well. Most notable was the change making possessable objects kinematic while not being possessed, which meant that the player leaving before launch wasn’t going to work the same. The second was determining when the player could launch, as without a ground check, something like this could happen:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">&nbsp;The first problem was not so hard to solve, as the design was just changed so that the player remained in the object on launch. This resulted in leap-frog type movement that felt fun and different. The second was not as easy as it seemed. I looked at multiple ground check options, firstly being a layer mask. Though consistent, the issue is that I am not in charge of the art team, so while they add assets and make changes to the scene, it can be difficult to ensure that everything the player is supposed to land on has the correct layer tag. The second method was a sphere check, but the sphere was either too small, getting the player stuck on ledges, or too big, and giving false positives way off of the ground. I ended on a checkbox, as it got the closest size I wanted with the least conflict. (As a side note, the design had been fleshed out to a desk bell, which would make a ‘ding’ sound upon striking a victim).</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The last key problem to fix in testing was balance. Though the object functioned, it wasn’t very easy or fun to use yet. It was hard to actually hit a victim with the small object. To remedy this, I added a homing function, so when the bell got close it would be pulled to the victim for an easy hit. With this, the object was finally available for testing! We brought the game to a showcase at one of Indiana University’s First Thursdays, and the bell was a resounding success! After multiple iterations and facing some tough bugs in implementation, it was great to see success on the other side, having now turned a bug to fix into a flagship feature for our project.</span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Starbreeze to develop and self-publish Dungeons & Dragons co-op game]]></title>
            <link>https://www.gamedeveloper.com/business/starbreeze-to-develop-and-self-publish-dungeons-dragons-co-op-game</link>
            <guid>https://www.resetera.com/threads/starbreeze-to-develop-and-self-publish-dungeons-dragons-co-op-game.1136316/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/starbreeze-to-develop-and-self-publish-dungeons-dragons-co-op-game<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Starbreeze Studios.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://www.starbreeze.com/news/starbreeze-to-develop-and-publish-game-based-on-the-dungeons-dragons-ip/">Starbreeze Studios</a></span><span data-testid="content-text"> is trading in its crime masks for dice. The Payday developer will be developing and self-publishing a game based on Wizards of the Coast's Dungeons &amp;&nbsp;Dragons, with a planned release window of 2026.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Currently known as&nbsp;</span><span data-testid="content-text"><span>Project Baxter,&nbsp;</span></span><span data-testid="content-text">the game will be a co-op live-service game running on Unreal Engine 5. Interestingly, Starbreeze says it'll release on "all major platforms," potentially&nbsp;leaving the room open for it being a cross-generation title down the line.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"When looking at prospective IPs for our future projects, Dungeons &amp; Dragons was always at the top of our list,"&nbsp;wrote Starbreeze CEO&nbsp;Tobias Sjögren. "Development of the game is in full swing, and we are excited to deliver an amazing Dungeons &amp; Dragons action-adventure in 2026."</span></p><h2 data-testid="content-text" id="Is Starbreeze making the right roll with Dungeons &amp;&nbsp;Dragons?">Is Starbreeze making the right roll with Dungeons &amp;&nbsp;Dragons?</h2><p data-testid="content-paragraph"><span data-testid="content-text">The success and acclaim of Larian Studios'&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/production/larian-studio-ceo-swen-vincke-pushes-back-on-i-baldur-s-gate-iii-i-being-standard-for-games">Baldur's Gate 3</a></span><span data-testid="content-text">has clearly invigorated Wizards and its prospects for D&amp;D games. At the start of the year, it was reported the TTRPG published canceled a number of </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/wizards-of-the-coast-reportedly-canceled-5-games-in-development">D&amp;D game projects</a></span><span data-testid="content-text">, at least two of which were from external developers.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Baldur's Gate 3&nbsp;</span></span><span data-testid="content-text">was just one game, but Starbreeze specializes in creating games with a surprisingly long tail. By keeping&nbsp;</span><span data-testid="content-text"><span>Payday 2&nbsp;</span></span><span data-testid="content-text">going for a decade, it </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/how-a-game-engine-switch-up-brought-starbreeze-to-its-knees">kept itself afloat</a></span><span data-testid="content-text"> and is now in a position to work on (and </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/starbreeze-studios-announces-return-to-game-publishing">publish</a></span><span data-testid="content-text">) </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/starbreeze-muses-new-ip-buys-after-going-all-in-on-payday">multiple projects</a></span><span data-testid="content-text">.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">A co-op D&amp;D game was previously attempted with&nbsp;Invoke Studios'&nbsp;</span><span data-testid="content-text"><span>Dungeons &amp; Dragons:&nbsp;Dark Alliance.&nbsp;</span></span><span data-testid="content-text">After the release of an expansion in 2022, support for it appears to have effectively ended.&nbsp;Invoke is making&nbsp;</span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/how-a-game-engine-switch-up-brought-starbreeze-to-its-knees">another D&amp;D title</a></span><span data-testid="content-text">, though it's currently unclear if it'll be co-op again.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">More than anything, the true question surrounding&nbsp;</span><span data-testid="content-text"><span>Baxter&nbsp;</span></span><span data-testid="content-text">is what </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/what-the-heck-is-happening-with-live-service-games-">the state of live service games</a></span><span data-testid="content-text"> will look like by the time 2026 comes around.&nbsp;</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Managing Art when the Design is behind]]></title>
            <link>https://www.gamedeveloper.com/design/managing-art-when-the-design-is-behind</link>
            <guid>https://www.resetera.com/threads/managing-art-when-the-design-is-behind.1136310/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/managing-art-when-the-design-is-behind<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">This is a blog based on my experience as the Lead Artist of an indie project with a bit of a rocky development. While we had a vision for what we wanted the game to be, we lacked designers to help meet that vision from a gameplay perspective; and the most difficult thing we learned from this experience is that when the design is behind, everyone is behind. With little framework of design to go off of for asset creation and ideation of the environment and art structure for the game, I had to navigate how to delegate tasks for UI, Environment and Prop art throughout the game.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For context, the setting of my game changed multiple times across its development, which meant that environment assets couldn’t be locked in until later on. The primary action in the game is to possess interesting objects, and cause reactions from victims with them. With the changing settings and level layout over and over, it was hard to solidify these, too. From graveyards, to restaurants, to factories, to finally, a hotel, we had a lot of vastly differing ideas in mind for what our levels looked like from time to time throughout development.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The biggest problem with this, as I’ve started to detail, was how to get ahead at all on the art direction for the game, while also ripping up and replacing our design and intentions for the level over and over. This was a huge time sink for us, and I made a lot of mistakes in the process of handling this. The *wrong* thing to do is to spend time making assets that there is no confident design for, as there is a high chance those assets will be scrapped. It’s even worse to task other artists with doing this, only to later have to tell them that they have to completely redo it for a new vision, or that their work won’t make it in at all anymore. While the trial and error was a beneficial learning experience for us, it’s something I think definitely doesn’t need to happen twice.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">So, the solution, in the easiest way of describing it, I believe is to delegate a list of what is most integral to the core game, and to really hone in on that. The creation of mood boards, key art pieces, concept sketches for different environments and things like such are integral to maintaining a vision for a project, but especially for locking it in. Something that we lacked a lot in the beginning was confidence on the setting, and I think establishing that first is most important tho making a cohesive project where the work done art wise is important and will match the final vision.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This works for the foundation, of course, but even deeper than that, there’s the approach to handling this from the Lead Artist position. Allocating time to research and reference gathering has proven to be a good allocation of time for artists who are blocking on design, especially since doing so, while it feels like stalling, will only benefit the final product. With the artists more confident in the work they are producing, they make much more cohesive pieces for the overall project than if they tried to create things with little footing. Beyond this, creating generic, but necessary asset lists also create a good foundation of where to put in work when the main hero pieces cannot be created yet because of the lack of design. Even if the environment cant be fully fleshed out yet, generic props like rocks, trees, doors, fences, etc are ones that can be universally used across vastly different environments, which allows more confidence that the work isn’t running the risk of being void later on. This makes for more enthusiasm in approaching tasks, as well as more confidence in the art direction for the game as a whole. No one likes to spend hours making art that gets tossed away in the end.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">With a focus on allocating artists time to meaningful work and also making sure their time is spent productively, good work can still be done even on a project that is lacking in design. Prioritizing the vision and solidifying that early can ensure that artists have a cohesive image of what they’re working towards and makes for easier task delegation on how to get people working towards the finish goal, and not aimlessly tossing work around and praying that some of it is able to stick and make it through.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This is a bit into my mind of what I learned while working from my own personal experience with this issue! I hope it helps in any way for people who might be struggling with the same, I completely understand the frustration and burnout it can cause. Try your best to pull through!</span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making a Vocal Synthesizer Sing Nonsense in a Video Game]]></title>
            <link>https://www.gamedeveloper.com/audio/making-a-vocal-synthesizer-sing-nonsense-in-a-video-game</link>
            <guid>https://www.resetera.com/threads/making-a-vocal-synthesizer-sing-nonsense-in-a-video-game.1136301/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/audio/making-a-vocal-synthesizer-sing-nonsense-in-a-video-game<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">You’re probably wondering why I am using a vocal synthesizer at all in a video game, but let me explain. This year I was given the opportunity to start creating songs for a music-heavy game called </span><span data-testid="content-text"><span>Rockin’ Racket</span></span><span data-testid="content-text">. One of the characters, Haley, is the vocalist for a pop punk band of the same name. I knew immediately that the songs from this band needed vocals that would represent Haley. How would I approach this? Well, I knew nothing about actual vocals so I opted for something that I am extremely comfortable with: vocal synthesizers. I have been working with vocal synths for around a decade, but never for anything outside of leisure. I thought I could challenge myself by using a vocal synth to help create the vocals that would express the unique singing style of Haley.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">It started with some samples. I was unsure how familiar the other members were with the way vocal synths sound. This led me to create some short clips of the voice library singing melodies I wrote into the program. I chose to use the Synthesizer V Kasane Teto voice library provided by AH-Software Co. Ltd. with synthesized vocal samples of Oyamano Mayo. In these short clips, I adjusted various parameters that would change the voice’s timbre. After getting feedback from the group, I settled on a specific parameter set. Now that I had the sound where we wanted it, how was I going to create lyrics? This game plans on having beep speak. You know, like the beeps and squeaks that Nintendo’s </span><span data-testid="content-text"><span>Animal Crossing</span></span><span data-testid="content-text"> games have. That means that I did not want English lyrics or anything remotely discernable from the vocals. Let the gibberish madness begin.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I began with consonant-vowel (CV) strands like </span><span data-testid="content-text"><span>ba bi bu be bo </span></span><span data-testid="content-text">that eventually evolved into consonant-vowel-consonant strands like </span><span data-testid="content-text"><span>bak tak nan tan</span></span><span data-testid="content-text">. I wanted it to somehow say words similar or sounding like English, but ever so slightly off so that the listener could never actually tell. This was difficult at first because I am mainly used to creating songs with discernable lyrics in either English or Japanese (and even Spanish at times). Purposefully making a song with nonsense gibberish as the lyrics was harder than I thought. Then, the question became: what sounds cool? What sounds different from what I’m used to hearing? What are some interesting combinations that you don’t commonly hear in English or Japanese? This is what led to something hilariously chaotic.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Synthesizer V has a feature where you can put multiple syllables into one note and the vocal synth will mash those syllables into the length of it. This might sound confusing, but imagine fitting </span><span data-testid="content-text"><span>supercalifragilisticexpialidocious</span></span><span data-testid="content-text"> in a single quarter note at 120 beats per minute. The result is quite interesting. This created what sounds like a free verse rap section in a pop punk piece which I found to be perfect for something as oppositional and rebellious as the genre itself. I had to purposefully break a previously conditioned habit of keeping everything in a nice and even meter. Because of this, it took me a while to go, “Hey, what if I just didn’t follow common musical/lyrical ideas?” Thus, the basis for the nonsense lyrics of this game had been created. Next time you choose to create a song for any piece of media, ask yourself what you can do differently that would go against what’s common. You might just find something as interesting as I did!</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For more information about Kasane Teto and SynthV, check out the following sites:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://kasaneteto.jp/">https://kasaneteto.jp/</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://dreamtonics.com/synthesizerv/">https://dreamtonics.com/synthesizerv/</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Want to take a look at what we have made so far? Be sure to check out our socials:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.youtube.com/@RockinRacket">https://www.youtube.com/@RockinRacket</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://twitter.com/rockinracket">https://twitter.com/rockinracket</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://www.instagram.com/rockinracket/">https://www.instagram.com/rockinracket/</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">For a glimpse of my work, check out my site:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a rel="nofollow" target="_blank" href="https://wrightsman-nicholas.weebly.com/">https://wrightsman-nicholas.weebly.com/</a></span></p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dauntless developer Phoenix Labs has laid off 34 support workers]]></title>
            <link>https://www.gamedeveloper.com/business/dauntless-developer-phoenix-labs-has-laid-off-34-support-workers</link>
            <guid>https://www.resetera.com/threads/dauntless-developer-phoenix-labs-has-laid-off-34-support-workers.1136298/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/dauntless-developer-phoenix-labs-has-laid-off-34-support-workers<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Dauntless</span></span><span data-testid="content-text"> and </span><span data-testid="content-text"><span>Fae Farm </span></span><span data-testid="content-text">developer Phoenix Labs has laid off 34 employees across its support teams.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://www.gamesindustry.biz/phoenix-labs-lays-off-34-staff">The studio confirmed the news to GamesIndustry.biz</a></span><span data-testid="content-text"> and said the layoffs were made after a "rigorous review" of its internal structures.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"We have made the tough decision to reduce our workforce by a total of 34 people, across our publishing, HR, IT, and shared services teams," said a company representative.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"Our games teams were unaffected and our work continues across our titles at Phoenix Labs. </span><span data-testid="content-text"><span>Fae Farm's</span></span><span data-testid="content-text"> DLC and </span><span data-testid="content-text"><span>Dauntless</span></span><span data-testid="content-text"> updates are on track, and we have exciting unannounced projects in the works."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Phoenix Labs thanked those affected for their service and said their "impact will be missed and live on."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The layoffs were made around two months after Phoenix Labs CEO Jesse Houston and COO Jeanne-Marie Owens </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/reshuffle-at-dauntless-dev-phoenix-labs-as-ceo-and-coo-step-down">stepped down for personal reasons</a></span><span data-testid="content-text">. At the time, Houston indicated the studio was well-positioned for the future.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"The future has never looked brighter—we've got an amazing pipeline of games in development and our incredible </span><span data-testid="content-text"><span>Fae Farm</span></span><span data-testid="content-text"> [just launched] for the Nintendo Switch and PC," he said.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This is the second round of layoffs sanctioned by Phoenix Labs in 2023. The studio </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-dauntless-i-dev-phoenix-labs-lays-off-30-employees">axed 30 jobs in May</a></span><span data-testid="content-text"> as it sought to reshuffle its production slate after breaking away from former parent company Garena.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">News Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">Game Developer news editor Chris Kerr is an award-winning journalist and reporter with over a decade of experience in the game industry. His byline has appeared in notable print and digital publications including Edge, Stuff, Wireframe, International Business Times, and&nbsp;</span><span data-testid="content-text"><a target="_blank" href="http://pocketgamer.biz/">PocketGamer.biz</a></span><span data-testid="content-text">. Throughout his career, Chris has covered major industry events including GDC, PAX Australia, Gamescom, Paris Games Week, and Develop Brighton. He has featured on the judging panel at The Develop Star Awards on multiple occasions and appeared on BBC Radio 5 Live to discuss breaking news.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fable 3's development was 18 months of regretful compromise]]></title>
            <link>https://www.gamedeveloper.com/business/fable-3-s-development-was-18-months-of-regretful-compromise</link>
            <guid>https://www.resetera.com/threads/fable-3s-development-was-18-months-of-regretful-compromise.1136292/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/fable-3-s-development-was-18-months-of-regretful-compromise<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Lionhead Studios.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Ex-staffers at Lionhead Studios spoke to </span><span data-testid="content-text"><a target="_blank" href="https://www.thegamer.com/the-story-of-fable-3-making-of-cut-content-cast/">The Gamer</a></span><span data-testid="content-text"> about </span><span data-testid="content-text"><span>Fable 3,&nbsp;</span></span><span data-testid="content-text">where they discussed the highs and lows of making the closer to the original fantasy-RPG trilogy.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">released in 2010, a little over&nbsp;two years after&nbsp;</span><span data-testid="content-text"><span>Fable 2</span></span><span data-testid="content-text">. But despite the shorter timeframe, former creative director Dene Carter claimed the issue back then wasn't really crunch; if anything, Lionhead "largely fixed"&nbsp;the process of creating a Fable game by the time of his departure in 2009.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">That sentiment was similarly echoed by gameplay programmer Kostas Zarifis, who said making&nbsp;</span><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">was a smoother cycle than its predecessor. "The ground was finally not so shaky,"&nbsp;he noted, explaining that the tools from the first two games were of great help here.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Sometimes, it's easy to tell when </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/design/the-rise-of-i-dragon-age-ii-i-">sequels</a></span><span data-testid="content-text"> are made in a short development time, either on a presentational or mechanical level. Zarifis pointed out that Lionhead actively avoided doing "</span><span data-testid="content-text"><span>Fable 2,&nbsp;</span></span><span data-testid="content-text">again,"&nbsp;calling it a boon and a burden:&nbsp;"We can't help it. It's kind of a blessing and curse, the Lionhead way."&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Rather than crunch, the past Lionhead staff said they chose to cut where they could. As he has been previously, </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/design/molyneux-we-didn-t-have-the-time-to-craft-i-fable-iii-i-into-what-that-dream-was-">Peter Molyneux</a></span><span data-testid="content-text"> candidly called&nbsp;</span><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">"a third of the size it should've been."&nbsp;He told The Gamer the game's final third wherein players take the throne and rule Albion&nbsp;was severely cut down from its original intended design.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"What we wanted to do is give players the feeling that they could be whatever [royalty] they wanted,"&nbsp;Molyneux explained. After the first act was about players' "claim to power,"&nbsp;the next two would've juggled that responsibility and shown visible consequences like in the first two games.&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Instead, Lionhead did enough cutbacks that Molyneux called them "ten mini-events."</span></p><h2 data-testid="content-text" id="Fable 3"><span>Fable 3</span>&nbsp;inherited a troubled throne that ended Lionhead</h2><p data-testid="content-paragraph"><span data-testid="content-text">What did the threequel in, at least as far as Molyneux is concerned, is that he didn't shoot down Microsoft telling them after&nbsp;</span><span data-testid="content-text"><span>Fable 2&nbsp;</span></span><span data-testid="content-text">to "next time, do it on time."&nbsp;To him,&nbsp;that methodology&nbsp;went against the Lionhead spirit of "we make the game, play it, go back to the drawing board, play it, go back to the drawing board."&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Earlier this year, Microsoft came under fire by former 343 Industries employees for the </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/ex-343-developers-call-out-microsoft-for-mismanaging-i-halo-infinite-i-">handling of&nbsp;</a></span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/ex-343-developers-call-out-microsoft-for-mismanaging-i-halo-infinite-i-">Halo Infinite</a></span><span data-testid="content-text">. Speaking to his experience, Molyneux was a little defensive of his former parent company, though his comments were also slightly illuminating of how working under larger studios could be back then (and still can be, in some cases).&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">On one hand, Molyneux said&nbsp;Microsoft "never told you to do something, they just dangled a really lovely golden carrot in front of you if you did something.” But by his own admission, he could've pushed to delay&nbsp;</span><span data-testid="content-text"><span>Fable 3</span></span><span data-testid="content-text"> instead of going for the bonus structure that "incentivized us to hit our dates, rather than hit the quality."&nbsp;</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"It may have been my fault actually,"&nbsp;he said. "I hate the fact that we had all this potential and we didn't do what we should have done, and [said] it needs another year and a half. It needed double the time, basically."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Carter left a year before&nbsp;</span><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">came out, implying his exit was due to "other forces conspiring to make the design of the game painful.&nbsp;From what I heard about what it was like at Lionhead after I left, I was very glad I was no longer working there."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Lionhead </span><span data-testid="content-text"><a target="_self" href="https://www.gamedeveloper.com/business/-i-fable-i-developer-lionhead-closes-its-doors-for-good">closed its doors</a></span><span data-testid="content-text"> in 2016. The Gamer intends to release a deep dive on the studio's last days in the near future, but until then, its look back on&nbsp;</span><span data-testid="content-text"><span>Fable 3&nbsp;</span></span><span data-testid="content-text">can be read </span><span data-testid="content-text"><a target="_blank" href="https://www.thegamer.com/the-story-of-fable-3-making-of-cut-content-cast/">here</a></span><span data-testid="content-text">. The full retrospective dives into the game's interactive UI, audio, and acquiring its star-studded cast.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ability for Other Abilities]]></title>
            <link>https://www.gamedeveloper.com/design/ability-for-other-abilities</link>
            <guid>https://www.resetera.com/threads/ability-for-other-abilities.1136286/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/design/ability-for-other-abilities<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Going into a project that requires dozens of abilities leads to interesting team dynamics, since the way that each ability interacts with the rest of the game is going to depend on how the team implements it. It raises questions about who should take on the tasks for each ability. For example, if an ability needs to deal damage to an enemy, the team members that developed the enemy system are going to have the best understanding of how to implement said ability. However, if the team delegates all ability implementations to one subset of team members, those members are going to have the best understanding of all the abilities, and each ability will have a similar style of implementation, which can make it easier to adjust functionality later on in the project.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Our team, Crystalline Games, decided to go with the latter approach for our first game, Conquering Ciros. Conquering Ciros is a rogue-like survival game, Vampire Survivors-esque, and so it needs a good amount of unique abilities. I was one of the two programmers delegated to ability programming, and I wanted to describe my process of programming one ability that required a lot more work than any of the others. This experience was interesting for two reasons; it required significantly more interaction with other aspects of the game, and it displayed some pros and cons of how we organized our programming team.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This ability is called Buff Zone, and as the name suggests, it buffs things within a zone. Specifically, it buffs any crystals that are within a certain radius of an object that it spawns. Crystals are items you collect throughout gameplay, and they each have an ability. So right off the bat, Buff Zone is already more than just spawning an object that collides with enemies, which is usually all you need for most abilities.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">First, I needed to check if a crystal was within one of the Zones spawned by Buff Zone. As a side note, Buff Zone spawns a circle in a random position, with a random type, every few seconds, so I needed a way to distinguish what type of circle the crystal was in. I also needed to deal with scenarios where a crystal might be in two different circles at the same time. At face value, this seems straightforward, but because I had no involvement with developing the crystal system, I didn’t realize that crystals lacked any type of collider. They are just generated with a sprite, a script with some general functionality, and a script with specific behavior for the ability.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The workaround for this isn’t difficult, but it is probably less efficient than Unity’s built-in methods of handling collision, and it really makes the code messier and harder to read:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">It looks a lot worse than a simple OnTriggerEnter2D, and this has to take place in Update, which I like to keep clean as much as possible. If I had worked on programming crystals originally, I might have looked at this ability ahead of time and added colliders to the crystals. I think this also stresses the importance of team communication, especially if tasks are so strictly divided between team members.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">&nbsp;Secondly, I wanted to cover a neat optimization I found while programming Buff Zone. I probably would not have found this if everything was just handled by colliders, so at least there’s a silver lining. It helps cut down on the constant updates to check if a crystal needs to be buffed or not. Each crystal needs to be un-buffed if the spawned zone despawns </span><span data-testid="content-text"><span>or </span></span><span data-testid="content-text">if the crystal exits the zone’s radius.</span></p><div data-testid="content-paragraph"><p><span data-testid="content-text">&nbsp;Instead of checking every frame for if a given zone had become null, I took advantage of the despawning coroutine in my ability script, and just wrote a few if statements to catch any crystals that were in the radius before the zone despawned. If any of those crystals were buffed, I just applied the debuff to them. It involved spreading out the buff/debuff code between two scripts, but now the game only has to run these if statements every few seconds, as opposed to every frame.</span></p><p><span data-testid="content-text">This project was my first team-based game dev experience outside of a game jam scenario, but I hope this situation gave some insight into managing team communication, planning, and working around problems that may arise from it.</span></p></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Custom UI bars in Unity (Using Sliders!)]]></title>
            <link>https://www.gamedeveloper.com/art/custom-ui-bars-in-unity-using-sliders-</link>
            <guid>https://www.resetera.com/threads/custom-ui-bars-in-unity-using-sliders.1136283/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/art/custom-ui-bars-in-unity-using-sliders-<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">I have been the leader programmer for the 310Games LLC since August 2023. Despite what the title may suggest however, I am not always just required to do programming work. Sometimes I need to make, for example, custom UI sliders for our art folks to come and touch up later. So, in this post I will walk through my process for making these sliders and the troubles I worked through for the final product (at least before better art was added!).</span></p><p data-testid="content-paragraph"><span data-testid="content-text">To begin with, I had to make the sliders themselves. In Unity, this is as simple as right clicking in the hierarchy, going to UI, then selecting Slider.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">This creates something that looks like this in the unity scene:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Now in the hierarchy, click the drop down menu under the new slider and and notice the sections labeled "Background", "Fill Area", and "Handle Slide Area". In my case, I was handling the bars purely through code and with no other interaction, so I deleted the "Handle Slide Area" object entirely, as it was not needed for that case. That will leave you with a bar that looks like this:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Now, you want to select the object in the hierarchy called "Background" and find the image component on it. Under "Source Image", select whatever image you have that will become the shape of the bar. For this step-by-step example I am creating the bottom-most slice of the earlier cauldron I showed. Next, click the dropdown menu next to "Fill Area", find the image component on this one and select "none" as the source image (this will make sense in a moment). Your slider should not look something like this (using your own custom shape of course):</span></p><p data-testid="content-paragraph"><span data-testid="content-text">So, you might be wondering why it looks so funky. No worries, if we go back to the Image component on the Background object, you will see a button that says "Set Native Size". Click this button, and everything should start looking better.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Finally, go to the "Fill Area" object. You will notice that it does not currently have any components other than a Rect Transform. In an area underneath that component, right click. We are going to add three components: A canvas renderer, an Image, and a Mask.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">You can leave the canvas renderer alone. In the image component, once again add in the image you are using for the shape of the slider and set native size. You might have to move some things around at this step to make them line up. Finally, under the mask component, uncheck the box that says "show Mask Graphic". To test if everything has gone as planned, go into the "Fill" Object again on the hierarchy and in the Image component, select a color other than the default. If you then select the overall Slider object and find the Slider component, you can scroll through and find the "Value" slider. Try moving this up and down and if you see your slider filling with your selected color, you have done it! If not, I reccommend double checking the previous steps. While in the Slider component you should also uncheck the "Interactable" box and set the Transition drop down to None. Look into these if you have need of different functionality, however for the purposes of this post they are unneeded.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Now, for the code.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Here is an image of all the code I used to control the sliders. Simply make an empty gameobject in the Unity scene and drag your code onto it. Make serialized fields for your sliders so you can access them in your code(or define the sliders in your code your preferred way, this way is just simple especially with a low number of sliders). In our game we use a system of listener functions to help decouple all of our objects. So, whenever the score is updated by a different file, it sends out a signal and any file that subscribes to that signal will hear it and get the needed information. You may consider putting this empty game object into a prefab along with the slider if you will be spawning many different instances like spawning many enemies each with their own health bar. Then, you simply set yourSlider.value equal to whatever number you are trying to track. You can also set the max value (aka the value at which it will appear full) with "yourSlider.maxValue = number" or you can set a value in the Unity inspector in the slider object, slider component.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">There you have it! A programmers implementation of a simple custom shaped slider. The opportunities afforded by this implementation are plentiful and it also has room to include any other custom aspect you may need of it. Thank you for reading!</span></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>