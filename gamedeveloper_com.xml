<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Tue, 26 Nov 2024 18:24:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Report: Sniper Elite battle royale spinoff cancelled after Tencent pulls funding]]></title>
            <link>https://www.gamedeveloper.com/business/report-sniper-elite-s-battle-royale-spinoff-cancelled-after-tencent-pulls-funding</link>
            <guid>https://www.resetera.com/threads/report-sniper-elite-battle-royale-spinoff-cancelled-after-tencent-pulls-funding.1045779/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/report-sniper-elite-s-battle-royale-spinoff-cancelled-after-tencent-pulls-funding<br/><br/><div id="readability-page-1" class="page"><div data-component="captioned-content" data-testid="featured-image"><p><span>Image via Rebellion Developments.</span></p></div><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Rebellion Developments has reportedly scrapped a battle royale spinoff for its Sniper Elite series.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Per </span><span data-testid="content-text"><a target="_blank" href="https://insider-gaming.com/exclusive-sniper-elites-battle-royale-game-has-been-canceled-as-tencent-pulls-funding/">Insider Gaming,</a></span><span data-testid="content-text"> the spinoff, codenamed 'Project Archipelago,' was axed after Tencent chose to halt funding. The project was first </span><span data-testid="content-text"><a target="_blank" href="https://www.youtube.com/watch?v=gulSkpVklx4">announced</a></span><span data-testid="content-text"> in August amid alpha playtests and would have been the first proper multiplayer entry in the franchise.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">According to Insider Gaming, Rebellion leaders indicated the project was scrapped in </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/sony-shuts-down-concord-dev-firewalk-and-mobile-studio-neon-koi">response to the disastrous launch of Concord</a></span><span data-testid="content-text">, which caused Tencent to think twice about proceeding with Archipelago.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The outlet said developers working on the title have been moved to other projects and noted the cancellation didn't result in layoffs.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Rebellion declined to comment on the matter when approached by Game Developer.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">During a </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/report-tencent-pivoting-from-licensed-games-to-own-works">March earnings call</a></span><span data-testid="content-text">, Tencent CSO James Mitchell said the company intended to "focus on fewer bigger budget games." Live-service titles can be a costly endeavor and don't always succeed, with Tencent itself pulling the plug on its year-old multiplayer shooter </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/production/tencent-is-ditching-free-to-play-shooter-synced-after-one-year">Synced</a></span><span data-testid="content-text"> earlier this year.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In the past year, other companies have ended their live-service games that had been around for at least </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/firesprite-s-twisted-metal-game-among-canceled-playstation-projects">a year</a></span><span data-testid="content-text">, or were actively in </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/report-certain-affinity-s-halo-battle-royale-project-canceled">mid-development</a></span><span data-testid="content-text">. The reasons vary: </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/report-behaviour-interactive-shutters-midwinter-entertainment-after-scrapping-dead-by-daylight-spinoff">Behaviour Interactive's Project T</a></span><span data-testid="content-text"> was killed because development wasn't coming together, while </span><span data-testid="content-text"><span>Synced</span></span><span data-testid="content-text"> ended because its player base seemingly wasn't there. Conversely, Naughty Dog's </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/console/naughty-dog-cancels-the-last-of-us-multiplayer-spinoff">multiplayer Last of Us game</a></span><span data-testid="content-text"> ended when the studio realized it would be too great of an undertaking.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Unity project for all platforms: Part 1]]></title>
            <link>https://www.gamedeveloper.com/programming/unity-project-for-all-platforms-part-1-</link>
            <guid>https://www.resetera.com/threads/a-unity-project-for-all-platforms-part-1.1045719/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/programming/unity-project-for-all-platforms-part-1-<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Today I would like to share one of the template projects, the settings and modules of which I use from project to project. With its help I will show one of the options for setting up a Unity game that will work on many platforms, including Steam, Android platforms (Google Play), Web platforms (platforms supported by </span><span data-testid="content-text"><a target="_blank" href="https://wiki.playgama.com/playgama/sdk/engines/unity/platform-parameters">Playgama (Instant) Bridge</a></span><span data-testid="content-text">, for example, CrazyGames, Game Distribution, Playgama, Yandex Games etc.). This template project covers the following topics:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a data-discover="true" href="https://www.gamedeveloper.com/programming/unity-project-for-all-platforms-part-1-#_hm2dwm6eby7e">- Working with basic project classes</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a data-discover="true" href="https://www.gamedeveloper.com/programming/unity-project-for-all-platforms-part-1-#_o8jh1ub27w9u">- Saving game data</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a data-discover="true" href="https://www.gamedeveloper.com/programming/unity-project-for-all-platforms-part-1-#_molyg6fmpmcc">- Importing textures, working with sprites and Sprite Atlas</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a data-discover="true" href="https://www.gamedeveloper.com/programming/unity-project-for-all-platforms-part-1-#_fnrxaxd5dfgm">- Transitions between scenes</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a data-discover="true" href="https://www.gamedeveloper.com/programming/unity-project-for-all-platforms-part-1-#_hp2et9mpm6uz">- Project build settings</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a data-discover="true" href="https://www.gamedeveloper.com/programming/unity-project-for-all-platforms-part-1-#_c6aic3yq1dal">- Project .gitignore file</a></span></p><p data-testid="content-paragraph"><span data-testid="content-text">- Video playback</span></p><p data-testid="content-paragraph"><span data-testid="content-text">- Playing music and sounds</span></p><p data-testid="content-paragraph"><span data-testid="content-text">- Input System</span></p><p data-testid="content-paragraph"><span data-testid="content-text">- Working with metrics</span></p><p data-testid="content-paragraph"><span data-testid="content-text">- Classes for monetization via advertising</span></p><p data-testid="content-paragraph"><span data-testid="content-text">- Localization</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In this article, we will analyze the first few topics, the rest will be described in upcoming articles.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The template project is available for download at the following </span><span data-testid="content-text"><a target="_blank" href="https://gitlab.com/bg.elixir/Unity2DTemplate">link</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">A small disclaimer: using this template does not guarantee passing the moderation of specific platforms, each game has its own nuances that, one way or another, affect the successful overcoming of the obstacle in the form of moderation.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In this project, I tried to collect the most frequently used mechanisms that are necessary in almost any game.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">So, let's get started...</span></p><h2 data-testid="content-text" id="Working with basic project classes">Working with basic project classes</h2><p data-testid="content-paragraph"><span data-testid="content-text">First of all, a few words about the project structure. If everything is pretty clear with most of the folders (but one way or another, we will analyze everything in the corresponding chapters), then the </span><span data-testid="content-text"><span>Scripts</span></span><span data-testid="content-text"> folder is worth a special mention. The root of this folder contains all the scripts that are inherited from the </span><span data-testid="content-text"><span>MonoBehaviour</span></span><span data-testid="content-text"> class, and which, accordingly, can be added to game objects as components.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The </span><span data-testid="content-text"><span>Services</span></span><span data-testid="content-text"> folder contains classes for working with localization, metrics, sound and advertising.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The </span><span data-testid="content-text"><span>Settings</span></span><span data-testid="content-text"> folder contains everything you need to successfully save and load game data.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The </span><span data-testid="content-text"><span>Utility</span></span><span data-testid="content-text"> folder contains several constant classes, as well as a number of static utility classes with auxiliary methods.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In this chapter, we will focus on two main classes of the Scripts folder, namely </span><span data-testid="content-text"><span>SingletonServices</span></span><span data-testid="content-text"> and </span><span data-testid="content-text"><span>GameServices</span></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Let's start with the first and most frequently used. SingletonServices, as the name suggests, works on the principle of the singleton template, accordingly, when initializing project objects, only one such object of the </span><span data-testid="content-text"><span>SingletonServices</span></span><span data-testid="content-text"> class will be created. This class provides access to all available auxiliary services of the game that may be needed on </span><span data-testid="content-text"><span>any</span></span><span data-testid="content-text"> scene. I emphasize the word "any", because if, for example, we compare this class with </span><span data-testid="content-text"><span>GameServices</span></span><span data-testid="content-text">, which use cases are limited to game scenes only, excluding the initialization scene. But we will discuss it a little bit later.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The </span><span data-testid="content-text"><span>SingletonServices</span></span><span data-testid="content-text"> class stores links to services for working with localization, music, advertising and metrics. Here you can also find methods for loading and saving game settings, as well as a method for getting sprites by their name. For example, saving game settings using this class will look like this:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>_singletonServices.SaveSettings();</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">where the </span><span data-testid="content-text"><span>_singletonServices</span></span><span data-testid="content-text"> variable was previously initialized as follows:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>SingletonServices _singletonServices = SingletonServices.Instance;</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">In order to work appropriately </span><span data-testid="content-text"><span>SingletonServices</span></span><span data-testid="content-text"> must be added to the game object on the initialization scene (InitScene).</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The second most important class – </span><span data-testid="content-text"><span>GameServices</span></span><span data-testid="content-text"> is also a singleton and is used to combine classes and methods for working with game objects. For example, hide the game menu and show the game itself, and vice versa, as well as change the language and others. With a significant expansion of the project, I still recommend separating, for example, work with the game UI to a separate script and using </span><span data-testid="content-text"><span>GameServices</span></span><span data-testid="content-text"> only as an intermediate class for access to the UI controller. There is not much need for this in our template project. In order to work appropriately </span><span data-testid="content-text"><span>GameServices</span></span><span data-testid="content-text"> must be added to the game object on the scene immediately following the initialization one (in our case, this is </span><span data-testid="content-text"><span>MainScene</span></span><span data-testid="content-text">). In addition, since GameServices uses SingletonServices methods inside itself, it must be initialized after the latter. To do this, go to the project settings and set the order of script execution as follows:</span></p><h2 data-testid="content-text" id="Saving game data">Saving game data</h2><p data-testid="content-paragraph"><span data-testid="content-text">As I mentioned earlier, all scripts for saving game data are located in the </span><span data-testid="content-text"><span>Scripts/Settings</span></span><span data-testid="content-text"> folder.</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>GameSettings</span></span><span data-testid="content-text"> is the main object for game data. I have added several fields for saving in it, for example, the selected language and the number of button clicks.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The file that is directly involved in loading and saving </span><span data-testid="content-text"><span>GameSettings</span></span><span data-testid="content-text"> is called </span><span data-testid="content-text"><span>FileSettingsAdapter</span></span><span data-testid="content-text">. It implements the </span><span data-testid="content-text"><span>ISettingsAdapter</span></span><span data-testid="content-text"> interface, which contains only two methods: loading and saving.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Saving data is probably quite obvious, but it is worth saying a few words about the signature of the loading method. Now it looks like this:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>void LoadSettings(Action&lt;GameSettings&gt; callAfterLoad);</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">The method does not return anything, but only accepts a delegate as a parameter, a reference to the method that should be called after the data loading is complete. In the general case (for example, for PC and Android builds), such a design is not necessary. This is done in order to support the web version, which we will talk about separately in one of the upcoming articles.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">The entire process of loading game settings can be viewed in </span><span data-testid="content-text"><span>SingletonServices.Start </span></span><span data-testid="content-text">method, the saving process can be viewed, for example, in the </span><span data-testid="content-text"><span>GameServices.IncreaseCounter</span></span><span data-testid="content-text">.</span></p><h2 data-testid="content-text" id="Importing textures, working with sprites and Sprite Atlas">Importing textures, working with sprites and Sprite Atlas</h2><p data-testid="content-paragraph"><span data-testid="content-text">Let's now discuss the components of the </span><span data-testid="content-text"><span>Sprites</span></span><span data-testid="content-text"> folder and start with a small, optional </span><span data-testid="content-text"><span>TextureImporter</span></span><span data-testid="content-text"> file. For some unknown reason, Unity decided to change the default behavior of the sprite importer and began to set the Sprite Mode to Multiple by default (previously it was Single), which means that the added image contains more than one sprite, for example, it can be a sprite sheet with character animation. So, if your project has much fewer sprite sheets than regular single sprites, then you can create a </span><span data-testid="content-text"><span>TextureImporter</span></span><span data-testid="content-text"> and set sprite settings for it, which will be applied to all imported textures by default. To do this, in the importer settings, you need to click on the preset selection button and create a new one with the desired import parameters.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We change all the necessary parameters of the created preset (in the case of this particular template project, the Sprite Mode was changed to Single and compression was turned off) and add the preset to the default ones.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Now when adding new sprites, their settings will match the settings of the created </span><span data-testid="content-text"><span>TextureImporter</span></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Now let's look at the </span><span data-testid="content-text"><span>SpriteAtlas</span></span><span data-testid="content-text"> file, which not only allows you to reduce the number of draw calls, but also provides a convenient way to get sprites by their name in the code. You can create a sprite atlas in the following way:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Now about the atlas settings.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">You need to be extremely careful with the Allow Rotation and Tight Packing parameters. They are enabled by default, but this sometimes leads to various distortions, flips and artifacts if you change component sprites on the fly from the code.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">And of course, don't forget to add folders that will be nested in the created sprite atlas. In our case, this is one folder named </span><span data-testid="content-text"><span>Atlas</span></span><span data-testid="content-text">. In the </span><span data-testid="content-text"><span>Sprites</span></span><span data-testid="content-text"> directory, there is also a </span><span data-testid="content-text"><span>NonAtlas</span></span><span data-testid="content-text"> folder, which, as you can judge by the name, we do not add to the sprite atlas. For example, you can store icons, a cursor, etc here.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">An example of getting sprites from a sprite atlas by name can be found in the </span><span data-testid="content-text"><span>SoundsButtonController.Start</span></span><span data-testid="content-text"> method.</span></p><h2 data-testid="content-text" id="Transitions between scenes">Transitions between scenes</h2><p data-testid="content-paragraph"><span data-testid="content-text">An example of transition from the initialization scene to the main one can be seen in the </span><span data-testid="content-text"><span>InitSceneLoader</span></span><span data-testid="content-text"> class. I need to mention that this script should be added as a component to the game object on the </span><span data-testid="content-text"><span>InitScene</span></span><span data-testid="content-text"> scene.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In the </span><span data-testid="content-text"><span>LoadingCheck</span></span><span data-testid="content-text"> method of this script, we wait for the initialization of all the main services, without which our game cannot work, and if everything is successful, in this case the intro video is launched, after which the transition to a new scene is carried out by the </span><span data-testid="content-text"><span>SceneManager.LoadScene</span></span><span data-testid="content-text"> method. Playing the video, of course, is not necessary here, and serves only as an example. Alternatively, you can launch any animation or immediately go to the main scene without additional steps.</span></p><h2 data-testid="content-text" id="Project build settings">Project build settings</h2><p data-testid="content-paragraph"><span data-testid="content-text">The main branch of the project is currently configured for the Android build, so in this article I will show the main settings for this platform, and I will describe the remaining settings in upcoming articles.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">So, when creating an Android project, I first go to the </span><span data-testid="content-text"><span>Project Settings -&gt; Player -&gt; Publishing settings</span></span><span data-testid="content-text"> section and check the following files: </span><span data-testid="content-text"><span>Custom Main Gradle Template, Custom Gradle Properties Template </span></span><span data-testid="content-text">and</span><span data-testid="content-text"><span> Custom Gradle Settings Template</span></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Believe me, this will save you from a painful headache when it comes to importing and using third-party packages, for example, the EDM package, also known as external dependency manager, which is needed for the Firebase, Appodeal, and other packages.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Next, I go to the </span><span data-testid="content-text"><span>Other Settings</span></span><span data-testid="content-text"> settings, set the package name and set the Target API Level.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">By default, the Target API Level is set to Automatic (highest installed), which means that when building an Android project, Unity will rely on the Android SDK and NDK already installed on the computer, so if, for example, version 33 is installed on the computer, then after building the package you will not be able to upload it to the Google Play Console, since at the moment the minimum value of Target API Level should be 34. But I would not recommend rushing and setting the highest version either, or at least have the opportunity to test your application on more than one device. Otherwise you could catch something like </span><span data-testid="content-text"><a target="_blank" href="https://issuetracker.unity3d.com/issues/android-targetapi-34-crash-on-launch">this</a></span><span data-testid="content-text">:</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In short, not long ago, if you set the Target API Level to 34, the game crashed when it launched on devices with API level 34 (it worked successfully on the rest). The solution here, unfortunately, is not the most pleasant and you will have to update Unity to a more recent version with that fix on board, which is not always possible and/or painless.</span></p><h2 data-testid="content-text" id="Project .gitignore file">Project .gitignore file</h2><p data-testid="content-paragraph"><span data-testid="content-text">I would like to finish today's part of the article with a short mention of the .gitignore file. There is nothing special here and at the moment it contains all the files and directories that should not be added to the repository. I will only add that it ignores folders </span><span data-testid="content-text"><span>web_build</span></span><span data-testid="content-text"> and </span><span data-testid="content-text"><span>PCBuild</span></span><span data-testid="content-text">. I usually add these folders myself and they serve, apparently, exclusively for builds of the corresponding platforms.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">That's all for today, we will continue to analyze this template project in the upcoming articles, but you can download it and analyze it yourself right now at the following </span><span data-testid="content-text"><a target="_blank" href="https://gitlab.com/bg.elixir/Unity2DTemplate">link</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">I am collecting wishlists </span><span data-testid="content-text"><a target="_blank" href="https://store.steampowered.com/app/3237330/Shadow_Tale/">here</a></span><span data-testid="content-text"> and </span><span data-testid="content-text"><a target="_blank" href="https://store.steampowered.com/app/3288020/100_Hidden_Capybaras">here</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Thank you for your attention!</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><a target="_blank" href="https://elixir.su/?utm_source=gd&amp;utm_medium=post6_template1&amp;utm_campaign=post6_template1">Link to my website</a></span></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>