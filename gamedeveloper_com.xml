<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>maGaming RSS Feed - gamedeveloper_com</title>
        <link>https://lukasz-gladek-av.github.io/custom-rss/gamedeveloper_com.xml</link>
        <description>A cleaned-up version of the original gaming feed for gamedeveloper_com</description>
        <lastBuildDate>Fri, 01 Nov 2024 17:44:28 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Dragon Age: The Veilguard opens as BioWare's best Steam launch with 70K concurrent players]]></title>
            <link>https://www.gamedeveloper.com/business/dragon-age-the-veilguard-opens-as-bioware-s-best-steam-launch-with-70k-concurrent-players</link>
            <guid>https://www.resetera.com/threads/dragon-age-the-veilguard-opens-as-biowares-best-steam-launch-with-70k-concurrent-players.1025451/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/business/dragon-age-the-veilguard-opens-as-bioware-s-best-steam-launch-with-70k-concurrent-players<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Dragon Age: The Veilguard </span></span><span data-testid="content-text">released on Halloween, and as a treat for BioWare, became the studio's biggest Steam game.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Per </span><span data-testid="content-text"><a target="_blank" href="https://steamdb.info/app/1845910/charts/">SteamDB</a></span><span data-testid="content-text">, the action-RPG sports 70,414 concurrent players at time of writing. Against its predecessors, that puts it well ahead of 2009's </span><span data-testid="content-text"><a target="_blank" href="https://steamdb.info/app/17450/charts/">Dragon Age: Origins</a></span><span data-testid="content-text"><span> </span></span><span data-testid="content-text">(7,089 players) and 2014's </span><span data-testid="content-text"><a target="_blank" href="https://steamdb.info/app/1222690/charts/">Dragon Age: Inquisition</a></span><span data-testid="content-text"><span> </span></span><span data-testid="content-text">(4,964 players). Steam numbers for </span><span data-testid="content-text"><span>Dragon Age II </span></span><span data-testid="content-text">are unavailable.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">As for BioWare overall, 2021's </span><span data-testid="content-text"><a target="_blank" href="https://steamdb.info/app/1328670/charts/">Mass Effect: Legendary Edition</a></span><span data-testid="content-text"><span> </span></span><span data-testid="content-text">comes in behind </span><span data-testid="content-text"><span>Veilguard </span></span><span data-testid="content-text">at 59,817 players. Save for 2019's </span><span data-testid="content-text"><span>Anthem, </span></span><span data-testid="content-text">most of the studio's games from 2004 to now are on Valve's platform.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">While EA and BioWare have not revealed any hard sales numbers, </span><span data-testid="content-text"><span>Veilguard </span></span><span data-testid="content-text">is also the publisher's biggest single-player Steam launch, just slightly beating out last year's </span><span data-testid="content-text"><a target="_blank" href="https://steamdb.info/app/1774580/charts/">Star Wars Jedi: Survivor </a></span><span data-testid="content-text">(67,855 players). Earlier this week, the game received fairly positive reviews, and BioWare has been heavily marketing the game since its reveal over the summer.</span></p><h2 data-testid="content-text" id="All roads lead back to Steam">All roads lead back to Steam</h2><p data-testid="content-paragraph"><span data-testid="content-text"><span>Dragon Age: The Veilguard's </span></span><span data-testid="content-text">Steam numbers are further notable since it was advertised as a game native to the platform. On PC, EA games typically require an Origin login, but BioWare </span><span data-testid="content-text"><a target="_blank" href="https://x.com/dragonage/status/1847014516623847625">repeatedly stressed</a></span><span data-testid="content-text"> its game had no requirement, and that it was fully playable on Steam Deck.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In the past year, other publishers have gradually returned to the Steam fold and brought their games over. Ubisoft's </span><span data-testid="content-text"><span>Star Wars Outlaws </span></span><span data-testid="content-text">is coming to the platform later in November to </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/ubisoft-s-recovery-from-weak-half-year-to-involve-addressing-polarized-comments-about-company">boost sales</a></span><span data-testid="content-text">, and </span><span data-testid="content-text"><span>Assassin's Creed Shadows </span></span><span data-testid="content-text">has already been promised as a </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/ubisoft-delays-assassin-s-creed-shadows-promises-day-one-steam-launch">day-one Steam game</a></span><span data-testid="content-text">.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Activision Blizzard ported over </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/activision-releases-three-previously-unlisted-call-of-duty-games-on-steam">older Call of Duty titles</a></span><span data-testid="content-text"> to the platform, then brought over Blizzard's </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/-i-overwatch-2-i-enters-steam-as-a-review-bombed-top-seller">Overwatch 2</a></span><span data-testid="content-text"><span> </span></span><span data-testid="content-text">and </span><span data-testid="content-text"><a target="_blank" href="https://www.gamedeveloper.com/business/blizzard-primes-i-diablo-iv-i-for-steam-release-later-this-month">Diablo IV</a></span><span data-testid="content-text">.</span></p></div><div><h2>About the Author</h2><div data-component="contributor-summary"><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fake it til’ you make it - faking extended draw distance in mobile games]]></title>
            <link>https://www.gamedeveloper.com/production/fake-it-til-you-make-it-faking-extended-draw-distance-in-mobile-games</link>
            <guid>https://www.resetera.com/threads/fake-it-til%E2%80%99-you-make-it-faking-extended-draw-distance-in-mobile-games.1025406/</guid>
            <content:encoded><![CDATA[https://www.gamedeveloper.com/production/fake-it-til-you-make-it-faking-extended-draw-distance-in-mobile-games<br/><br/><div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text"><span>Fake it til’ you make it - faking extended draw distance in mobile games</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text">Optimization is a cornerstone of mobile game development. With thousands of phone models in circulation, many of them running outdated chipsets, every game needs to target a reasonable lowest common denominator, and one of the most consistent ways to optimize performance in 3D games is to manage draw distance.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Drawing distance must be as short as possible to achieve stable FPS. But what about open worlds, where players need to see the entire map from any point? This is the challenge we faced in Cubic Games while developing Block City Wars, and below we will explore the solution we settled on, and the strengths of this particular approach.</span></p><h3 data-testid="content-text" id="The problem:"><span>The problem:</span></h3><p data-testid="content-paragraph"><span data-testid="content-text">In a game like Block City Wars, every player needs to see the entire map from any position or be at a disadvantage, and simply increasing the far clip plane won’t work. Increasing the draw distance raises the number of triangles that pass through all culling stages: more objects undergo bounding box checks on the CPU and more fragments are drawn on the GPU.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Using another camera for the background with a different drawing distance complicates camera management and adds unnecessary overhead. Lastly, experiments with HLOD (Hierarchical Level-Of-Detail) were also found unsuitable for solving this problem. While some of these solutions might be applicable to other games, they failed to address our needs. When all else fails, shader magic saves the day.</span></p><h3 data-testid="content-text" id="The essence of the solution:"><span>The essence of the solution:</span></h3><p data-testid="content-paragraph"><span data-testid="content-text">The solution we settled on was using a mixture of shader trickery combined with our existing simple fog effect to provide useful but largely faked detail. Using a shader, we can create the illusion that an object is far away while it is actually close to the player. This allows us to choose which objects will always be visible, regardless of distance.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">It makes sense to use only sufficiently tall objects so players can orient themselves on the map, allowing us to fully remove visual clutter from the final render. To ensure a seamless transition between “fake” objects and real ones, we will render silhouettes in fog color. This also allows us to significantly reduce detail. It will look like this:</span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>Before</span></span></p><p data-testid="content-paragraph"><span data-testid="content-text"><span>After</span></span></p><h3 data-testid="content-text" id="Deceiving CPU Culling:"><span>Deceiving CPU Culling:</span></h3><p data-testid="content-paragraph"><span data-testid="content-text">To achieve this effect, we can leverage the tools that Unity provides us. For a mesh to be sent for rendering, its bounds must fall within the camera frustum. This can be easily done, for example, using this MonoBehaviour. We will do this in Start() because Unity recalculates bounds when the mesh is initialized. For our purposes, we need to set the size so that the player’s camera is always inside the bounds; thus, the mesh will always be sent for rendering on the GPU, lightening the load on older CPU models.</span></p><pre data-component="code-block"><span data-testid="content-text">void Start() 
{
	Mesh mesh = selectedMeshFilter.sharedMesh;
	Bounds bounds = mesh.bounds;
	bounds.center = newCenter;
	bounds.size = newSize;
	mesh.bounds = bounds;
}</span></pre><h3 data-testid="content-text" id="Deceiving GPU Culling:"><span>Deceiving GPU Culling:</span></h3><p data-testid="content-paragraph"><span data-testid="content-text">Once the mesh is on the GPU, there is one more stage of frustum culling—between the vertex and fragment stages. To bypass this, we need to transform the vertex coordinates so that all vertices are within the camera’s view, while still preserving perspective.</span></p><pre data-component="code-block"><span data-testid="content-text">v2f vert (appdata v)
{
	v2f o;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
	float3 directionToOriginal = normalize(worldPos - _WorldSpaceCameraPos);
	float3 scaledPos = _WorldSpaceCameraPos + directionToOriginal*_ScaleDownFactor;
	float3 objectPos = mul(unity_WorldToObject, float4(scaledPos,1));	
	o.vertex =UnityObjectToClipPos(objectPos);
	return o;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></pre><p data-testid="content-paragraph"><span data-testid="content-text">_ScaleDownFactor is the distance from the camera at which all vertices will be located. It needs to be adjusted according to the fog distance to hide the transition.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">All we need to do in the fragment shader is simply draw the fog color, which will mask the geometry cutoff.</span></p><pre data-component="code-block"><span data-testid="content-text">fixed4 frag (v2f i) : SV_Target
{
	return unity_FogColor;
}
</span></pre><h3 data-testid="content-text"><br><span>Example with an Island Mesh:</span></h3><p data-testid="content-paragraph"><span data-testid="content-text">This effect can be clearly seen in Blender. If you position the camera at the origin and point it at a cube, then duplicate the cube and scale it relative to 0, from the camera’s perspective, there will be no difference between these cubes. Obviously a trick that won’t work quite right in VR, but we’re developing for mobile here, so depth perception isn’t something we have to work around.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">In our case, an additional step is added: the mesh is “squashed” to fit right at the edge of the camera’s drawing distance. This is done to avoid overlapping with the z-buffer of other objects that should be closer to the player. When dealing with ‘impostor’ detail objects like this, one little rendering glitch is all it takes to shatter the illusion and bring attention to background objects that should normally be seamless.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">We must also keep in mind cases where the camera might end up inside the silhouette mesh. Vertices in one triangle can end up on different sides of the camera, causing it to stretch across the entire screen. This should be taken into account when creating the silhouette mesh, ensuring the camera does not enter it or disabling meshes when the camera approaches.</span></p><h3 data-testid="content-text" id="Conclusion"><span>Conclusion</span></h3><p data-testid="content-paragraph"><span data-testid="content-text">While this approach won’t be applicable for all games, it fits Block City Wars and its existing fog effects perfectly. This approach allows for quickly extending the effective draw distance using ‘faked’ silhouetted detail under serious performance constraints, leveraging the existing fog effects to hide the smoke-and-mirrors used. It is easy to reproduce in any render pipeline and engine, and it does not require modification of existing code.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Even with much of the fine detail faked and obscured behind fog effects, the distant silhouettes still provide useful gameplay information to players at minimal performance cost. A net win for players across all platforms, especially older hardware.</span></p></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>